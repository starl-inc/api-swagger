openapi: 3.0.0
info:
  title: Starl-Backend API Document
  description: This is API Document of Starl-Backend
  version: 1.0.15

servers:
  - url: https://api.starl.co.jp/v1

paths:
  # -------------------- HealthCheck --------------------
  /health-check:
    post:
      tags:
        - HealthCheck
      summary: Health check
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
        '500':
          description: Internal Server Error

  # -------------------- AuthAdmin --------------------
  /admin/signin:
    post:
      tags:
        - AuthAdmin
      summary: Admin sign in
      requestBody:
        description: Admin auth info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminSignInRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminSignInResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Invalid request parameter
                description: id and password required to sign in admin
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Failed to sign in admin
                description: "Amazon Cognito: ${err.message}"
  /admin/signout:
    post:
      tags:
        - AuthAdmin
      summary: Admin sign out
      security:
        - BearerAuth: []
      requestBody:
        description: RefreshToken
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignOutResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Invalid request parameter
                description: refreshToken required to sign out admin
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Unauthorized
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Failed to sign out admin
                description: "Amazon Cognito: ${err.message}"

  # -------------------- AuthCorporation --------------------
  /admin/corporation/signup:
    post:
      tags:
        - AuthCorporation
      summary: Sign up corporation by admin
      security:
        - BearerAuth: []
      requestBody:
        description: Corporation object to signup
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CorporationSignUpRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporationSignUpResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Invalid request parameter
                description: id and corporationName required to sign up corporation
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Unauthorized
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Cognito:
                  value:
                    message: Failed to sign up corporation
                    description: "Amazon Cognito: ${err.message}"
                DynamoDB:
                  value:
                    message: Failed to sign up corporation
                    description: "Amazon DynamoDB: ${err.message}"
  /corporation/signin:
    post:
      tags:
        - AuthCorporation
      summary: Sign in corporation
      requestBody:
        description: Corporation auth info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CorporationSignInRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporationSignInResponse'
              examples:
                CorporationInitialSignInResponse:
                  summary: 初回ログイン時のレスポンス
                  value:
                    initialSignIn: true
                    session: AYABeEG4Uc9u9f-1S6Cyj3G5i8IAHQABAAdTZXJ2aWNlABBDb2duaXRvVXNlclBvb
                    idToken:
                    accessToken:
                    refreshToken:
                CorporationSignInResponse:
                  summary: 通常のレスポンス
                  value:
                    initialSignIn: false
                    session:
                    idToken: dmcxd329ujdmkemkd349r
                    accessToken: eyJz9sdfsdfsdfsd
                    refreshToken: dn43ud8uj32nk2je
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Invalid request parameter
                description: id and password required to sign in corporation
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Failed to sign in corporation
                description: "Amazon Cognito: ${err.message}"
  /corporation/reset-password:
    post:
      tags:
        - AuthCorporation
      summary: Corporation reset password
      requestBody:
        description: Corporation auth info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CorporationResetPasswordRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporationResetPasswordResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Invalid request parameter
                description: id, newPassword and session required to reset password
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Cognito:
                  value:
                    message: Failed to reset password
                    description: "Amazon Cognito: ${err.message}"
                DynamoDB:
                  value:
                    message: Failed to reset password
                    description: "Amazon DynamoDB: ${err.message}"
  /admin/corporation/{corporationId}/disable:
    put:
      tags:
        - AuthCorporation
      summary: Disable corporation by admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: corporationId
          description: Corporation ID
          required: true
          schema:
            type: string
            example: nikuyokocho
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporationDisableResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                InvalidStatusRegistered:
                  value:
                    message: Invalid corporation status
                    description: Required to reset password
                InvalidStatusDisabled:
                  value:
                    message: Invalid corporation status
                    description: Corporation is already disabled
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Unauthorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Corporation not found
                description: "Amazon DynamoDB: ${err.message}"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Failed to disable corporation
                description: "Amazon DynamoDB: ${err.message}"
  /admin/corporation/{corporationId}/activate:
    put:
      tags:
        - AuthCorporation
      summary: Activate corporation by admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: corporationId
          description: Corporation ID
          required: true
          schema:
            type: string
            example: nikuyokocho
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporationActivateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                InvalidStatusRegistered:
                  value:
                    message: Invalid corporation status
                    description: Required to reset password
                InvalidStatusActive:
                  value:
                    message: Invalid corporation status
                    description: Corporation is already active
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Unauthorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Corporation not found
                description: "Amazon DynamoDB: ${err.message}"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Failed to activate corporation
                description: "Amazon DynamoDB: ${err.message}"
  /corporation/change-password:
    post:
      tags:
        - AuthCorporation
      summary: Corporation change password
      requestBody:
        description: Corporation auth info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CorporationChangePasswordRequest'
      responses:
        '200':
          description: Successful Operation
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Invalid request parameter
                description: previousPassword, newPassword and accessToken required to change password
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Failed to change password
                description: "Amazon Cognito: ${err.message}"
  /corporation/signout:
    post:
      tags:
        - AuthCorporation
      summary: Corporation sign out
      security:
        - BearerAuth: []
      requestBody:
        description: RefreshToken
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignOutResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Invalid request parameter
                description: refreshToken required to sign out corporation
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Unauthorized
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Failed to sign out corporation
                description: "Amazon Cognito: ${err.message}"

  # -------------------- AuthShop --------------------
  /admin/shop/signup:
    post:
      tags:
        - AuthShop
      summary: Sign up shop by admin
      security:
        - BearerAuth: []
      requestBody:
        description: Shop object to signup
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShopSignUpRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopSignUpResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Invalid request parameter
                description: corporationId, id and shopName required to sign up shop
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Unauthorized
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Cognito:
                  value:
                    message: Failed to sign up shop
                    description: "Amazon Cognito: ${err.message}"
                DynamoDB:
                  value:
                    message: Failed to sign up shop
                    description: "Amazon DynamoDB: ${err.message}"
  /shop/signin:
    post:
      tags:
        - AuthShop
      summary: Sign in shop
      requestBody:
        description: Shop auth info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShopSignInRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopSignInResponse'
              examples:
                ShopInitialSignInResponse:
                  summary: 初回ログイン時のレスポンス
                  value:
                    initialSignIn: true
                    session: AYABeEG4Uc9u9f-1S6Cyj3G5i8IAHQABAAdTZXJ2aWNlABBDb2duaXRvVXNlclBvb
                    idToken:
                    accessToken:
                    refreshToken:
                ShopSignInResponse:
                  summary: 通常のレスポンス
                  value:
                    initialSignIn: false
                    session:
                    idToken: dmcxd329ujdmkemkd349r
                    accessToken: eyJz9sdfsdfsdfsd
                    refreshToken: dn43ud8uj32nk2je
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Invalid request parameter
                description: id and password required to sign in shop
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Failed to sign in shop
                description: "Amazon Cognito: ${err.message}"
  /shop/reset-password:
    post:
      tags:
        - AuthShop
      summary: Shop reset password
      requestBody:
        description: Shop auth info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShopResetPasswordRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopResetPasswordResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Invalid request parameter
                description: id, newPassword and session required to reset password
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Cognito:
                  value:
                    message: Failed to reset password
                    description: "Amazon Cognito: ${err.message}"
                DynamoDB:
                  value:
                    message: Failed to reset password
                    description: "Amazon DynamoDB: ${err.message}"
  /admin/shop/{shopId}/activate:
    put:
      tags:
        - AuthShop
      summary: Activate shop by admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: shopId
          description: Shop ID
          required: true
          schema:
            type: string
            example: nikuyokocho-0001
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopActivateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                InvalidCorporationStatusRegistered:
                  value:
                    message: Invalid corporation status
                    description: Corporation is required to reset password
                InvalidCorporationStatusDisabled:
                  value:
                    message: Invalid corporation status
                    description: Corporation is disabled
                InvalidShopStatusRegistered:
                  value:
                    message: Invalid shop status
                    description: Shop is required to reset password
                InvalidShopStatusActive:
                  value:
                    message: Invalid shop status
                    description: Shop is already active
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Unauthorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CorporationNotFound:
                  value:
                    message: Corporation not found
                    description: "corporationId: ${corporationId}"
                ShopNotFound:
                  value:
                    message: Shop not found
                    description: "shopId: ${shopId}"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Failed to activate shop
                description: "Amazon DynamoDB: ${err.message}"
  /corporation/shop/{shopId}/activate:
    put:
      tags:
        - AuthShop
      summary: Activate shop by corporation
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: shopId
          description: Shop ID
          required: true
          schema:
            type: string
            example: nikuyokocho-0001
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopActivateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                InvalidCorporationStatusRegistered:
                  value:
                    message: Invalid corporation status
                    description: Corporation is required to reset password
                InvalidCorporationStatusDisabled:
                  value:
                    message: Invalid corporation status
                    description: Corporation is disabled
                InvalidShopStatusRegistered:
                  value:
                    message: Invalid shop status
                    description: Shop is required to reset password
                InvalidShopStatusActive:
                  value:
                    message: Invalid shop status
                    description: Shop is already active
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Unauthorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CorporationNotFound:
                  value:
                    message: Corporation not found
                    description: "corporationId: ${corporationId}"
                ShopNotFound:
                  value:
                    message: Shop not found
                    description: "shopId: ${shopId}"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Failed to activate shop
                description: "Amazon DynamoDB: ${err.message}"
  /admin/shop/{shopId}/disable:
    put:
      tags:
        - AuthShop
      summary: Disable shop by admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: shopId
          description: Shop ID
          required: true
          schema:
            type: string
            example: nikuyokocho-0001
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopDisableResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                InvalidStatusRegistered:
                  value:
                    message: Invalid shop status
                    description: Shop is required to reset password
                InvalidStatusConfirmed:
                  value:
                    message: Invalid shop status
                    description: Shop is not activated yet
                InvalidStatusDisabled:
                  value:
                    message: Invalid shop status
                    description: Shop is already disabled
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Unauthorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ShopNotFound:
                  value:
                    message: Shop not found
                    description: "shopId: ${shopId}"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Failed to disable shop
                description: "Amazon DynamoDB: ${err.message}"
  /corporation/shop/{shopId}/disable:
    put:
      tags:
        - AuthShop
      summary: Disable shop by corporation
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: shopId
          description: Shop ID
          required: true
          schema:
            type: string
            example: nikuyokocho-0001
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopDisableResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                InvalidStatusRegistered:
                  value:
                    message: Invalid shop status
                    description: Shop is required to reset password
                InvalidStatusConfirmed:
                  value:
                    message: Invalid shop status
                    description: Shop is not activated yet
                InvalidStatusDisabled:
                  value:
                    message: Invalid shop status
                    description: Shop is already disabled
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Unauthorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ShopNotFound:
                  value:
                    message: Shop not found
                    description: "shopId: ${shopId}"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Failed to disable shop
                description: "Amazon DynamoDB: ${err.message}"
  /shop/change-password:
    post:
      tags:
        - AuthShop
      summary: Shop change password
      requestBody:
        description: Shop auth info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShopChangePasswordRequest'
      responses:
        '200':
          description: Successful Operation
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Invalid request parameter
                description: previousPassword, newPassword and accessToken required to change password
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Cognito:
                  value:
                    message: Failed to change password
                    description: "Amazon Cognito: ${err.message}"
                DynamoDB:
                  value:
                    message: Failed to change password
                    description: "Amazon DynamoDB: ${err.message}"
  /shop/signout:
    post:
      tags:
        - AuthShop
      summary: Shop sign out
      security:
        - BearerAuth: []
      requestBody:
        description: RefreshToken
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignOutResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Invalid request parameter
                description: refreshToken required to sign out shop
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Unauthorized
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Failed to sign out shop
                description: "Amazon Cognito: ${err.message}"

  # -------------------- AuthUser --------------------
  /user/signup:
    post:
      tags:
        - AuthUser
      summary: Sign up user
      requestBody:
        description: User object to signup
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignUpRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSignUpResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                InvalidParams:
                  value:
                    message: Invalid request parameter
                    description: deviceId required to sign up user
                DeviceUsed:
                  value:
                    message: This device already used
                    description: "deviceId: ${deviceId}"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Cognito:
                  value:
                    message: Failed to sign up user
                    description: "Amazon Cognito: ${err.message}"
                DynamoDB:
                  value:
                    message: Failed to sign up user
                    description: "Amazon DynamoDB: ${err.message}"
  /user/signin:
    post:
      tags:
        - AuthUser
      summary: Sign in user
      requestBody:
        description: User auth info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignInRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSignInResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Invalid request parameter
                description: id and password required to sign in user
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Failed to sign in user
                description: "Amazon Cognito: ${err.message}"
  /user/register:
    post:
      tags:
        - AuthUser
      summary: User registration
      requestBody:
        description: User account info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegisterResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                InvalidParams:
                  value:
                    message: Invalid request parameter
                    description: email and accessToken required to register user
                EmailUsed:
                  value:
                    message: This email already used
                    description: "email: ${email}"
                InvalidStatusRegistered:
                  value:
                    message: Invalid user status
                    description: User is already registered
                InvalidStatusVerified:
                  value:
                    message: Invalid user status
                    description: User is already verified
                InvalidStatusActive:
                  value:
                    message: Invalid user status
                    description: User is already active
                InvalidStatusDisabled:
                  value:
                    message: Invalid user status
                    description: User is disabled
                InvalidStatusRequireVerification:
                  value:
                    message: Invalid user status
                    description: User is already registered
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Cognito:
                  value:
                    message: Failed to register user
                    description: "Amazon Cognito: ${err.message}"
                DynamoDB:
                  value:
                    message: Failed to register user
                    description: "Amazon DynamoDB: ${err.message}"
  /user/resende-code:
    post:
      tags:
        - AuthUser
      summary: User resend code
      requestBody:
        description: Email
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResendCodeRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResendCodeResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                InvalidParams:
                  value:
                    message: Invalid request parameter
                    description: accessToken required to resend code
                InvalidStatusSignedUp:
                  value:
                    message: Invalid user status
                    description: User is required to register email
                InvalidStatusVerified:
                  value:
                    message: Invalid user status
                    description: User is already verified
                InvalidStatusActive:
                  value:
                    message: Invalid user status
                    description: User is already verified
                InvalidStatusDisabled:
                  value:
                    message: Invalid user status
                    description: User is disabled
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Cognito:
                  value:
                    message: Failed to resend code
                    description: "Amazon Cognito: ${err.message}"
                DynamoDB:
                  value:
                    message: Failed to resend code
                    description: "Amazon DynamoDB: ${err.message}"
  /user/verify:
    post:
      tags:
        - AuthUser
      summary: User email verification
      requestBody:
        description: User verification code and access token
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserVerifyRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserVerifyResponse'
              examples:
                Regisetration:
                  summary: Verification of registration
                  value:
                    id: ad89afgt
                    email: user@gmail.com
                    status: VERIFIED
                ChangeEmail:
                  summary: Verification of update email
                  value:
                    id: ad89afgt
                    email: user@gmail.com
                    status: ACTIVE
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                InvalidParams:
                  value:
                    message: Invalid request parameter
                    description: code and accessToken required to verify email
                InvalidStatusSignedUp:
                  value:
                    message: Invalid user status
                    description: User is required to register email
                InvalidStatusVerified:
                  value:
                    message: Invalid user status
                    description: User is already verified
                InvalidStatusActive:
                  value:
                    message: Invalid user status
                    description: User is already verified
                InvalidStatusDisabled:
                  value:
                    message: Invalid user status
                    description: User is disabled
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Cognito:
                  value:
                    message: Failed to verify email
                    description: "Amazon Cognito: ${err.message}"
                DynamoDB:
                  value:
                    message: Failed to verify email
                    description: "Amazon DynamoDB: ${err.message}"
  /user/change-password:
    post:
      tags:
        - AuthUser
      summary: User change password
      requestBody:
        description: Pre/new password and access token
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserChangePasswordRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserChangePasswordResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                InvalidParams:
                  value:
                    message: Invalid request parameter
                    description: prevPassword, newPassword and accessToken required to change password
                InvalidStatusSignedUp:
                  value:
                    message: Invalid user status
                    description: User is required to register email
                InvalidStatusRegistered:
                  value:
                    message: Invalid user status
                    description: User is required to verify email
                InvalidStatusDisabled:
                  value:
                    message: Invalid user status
                    description: User is disabled
                InvalidStatusRequireVerification:
                  value:
                    message: Invalid user status
                    description: User is required to verify email
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Cognito:
                  value:
                    message: Failed to change password
                    description: "Amazon Cognito: ${err.message}"
                DynamoDB:
                  value:
                    message: Failed to change password
                    description: "Amazon DynamoDB: ${err.message}"
  /user/change-email:
    post:
      tags:
        - AuthUser
      summary: User change email
      requestBody:
        description: User new email and access token
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserChangeEmailRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserChangeEmailResponse'
        '400':
          description: Bad Request
  /admin/user/{userId}/disable:
    put:
      tags:
        - AuthUser
      summary: Disable user by admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          description: User ID
          required: true
          schema:
            type: string
            example: ad89afgt
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminDisableUserResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: User not found
  /admin/user/{userId}/activate:
    put:
      tags:
        - AuthUser
      summary: Activate user by admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          description: User ID
          required: true
          schema:
            type: string
            example: ad89afgt
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminActivateUserResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: User not found
  /user/signout:
    post:
      tags:
        - AuthUser
      summary: User sign out
      security:
        - BearerAuth: []
      requestBody:
        description: RefreshToken
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: Successful Operation
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /user/delete:
    delete:
      tags:
        - AuthUser
      summary: Delete User
      security:
        - BearerAuth: []
      requestBody:
        description: AccessToken
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accessToken:
                  type: string
                  example: eyJz9sdfsdfsdfsd
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDeleteResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized

  # -------------------- Admin --------------------
  /admin/corporation/list:
    get:
      tags:
        - Admin
      summary: Read corporations by admin
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: yearMonth
          schema:
            type: integer
            example: 202107
          description: Year and month of items to return
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: nikuyokocho
                    status:
                      type: string
                      example: ACTIVE
                    corporationName:
                      type: string
                      example: 渋谷 肉横丁
                    shopsCount:
                      type: integer
                      example: 3
                    yearMonth:
                      type: integer
                      example: 202107
                    totalSales:
                      type: integer
                      example: 1234567
                    totalEarnedPoints:
                      type: integer
                      example: 12345
                    totalUsedPoints:
                      type: integer
                      example: 3000
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Corporation Not Found
  /admin/corporation/{corporationId}:
    put:
      tags:
        - Admin
      summary: Update corporation by admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: corporationId
          description: Corporation ID
          required: true
          schema:
            type: string
            example: nikuyokocho
      requestBody:
        description: Corporation object to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                corporationName:
                  type: string
                  example: 渋谷 肉横丁
              required:
                - corporationName
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: nikuyokocho
                  corporationName:
                    type: string
                    example: 渋谷 肉横丁
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Corporation not found
  /admin/shop/list:
    get:
      tags:
        - Admin
      summary: Read shops by admin
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: corporationId
          schema:
            type: string
            example: nikuyokocho
          description: Corporation ID
        - in: query
          name: yearMonth
          schema:
            type: integer
            example: 202107
          required: true
          description: Year and month of items to return
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: nikuyokocho-0001
                    corporationId:
                      type: string
                      example: nikuyokocho
                    status:
                      type: string
                      example: ACTIVE
                    corporationName:
                      type: string
                      example: 渋谷 肉横丁
                    shopName:
                      type: string
                      example: 渋谷 肉横丁 肉太郎
                    address:
                      type: string
                      example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                    phone:
                      type: string
                      example: 03-6427-8994
                    openingHours:
                      type: string
                      example: |
                        月～日、祝日、祝前日: 17:00～翌0:00
                        定休日：不定休
                    yearMonth:
                      type: integer
                      example: 202107
                    totalSales:
                      type: integer
                      example: 1234567
                    totalEarnedPoints:
                      type: integer
                      example: 12345
                    totalUsedPoints:
                      type: integer
                      example: 3000
        '401':
          description: Unauthorized
        '404':
          description: Corporation Not Found
  /admin/shop/{shopId}:
    put:
      tags:
        - Admin
      summary: Update shop by admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: shopId
          description: Shop ID
          required: true
          schema:
            type: string
            example: nikuyokocho-0001
      requestBody:
        description: Shop object to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shopName:
                  type: string
                  example: 渋谷 肉横丁 肉太郎
                address:
                  type: string
                  example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                phone:
                  type: string
                  example: 03-6427-8994
                openingHours:
                  type: string
                  example: |
                    月～日、祝日、祝前日: 17:00～翌0:00
                    定休日：不定休
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: nikuyokocho-0001
                  shopName:
                    type: string
                    example: 渋谷 肉横丁 肉太郎
                  address:
                    type: string
                    example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                  phone:
                    type: string
                    example: 03-6427-8994
                  openingHours:
                    type: string
                    example: |
                      月～日、祝日、祝前日: 17:00～翌0:00
                      定休日：不定休
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Shop not found
  /admin/user/list:
    get:
      tags:
        - Admin
      summary: Read users by admin
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: ad89afgt
                    email:
                      type: string
                      example: user@gmail.com
                    status:
                      type: string
                      example: ACTIVE
                    nickname:
                      type: string
                      example: スタールくん
                    iconUrl:
                      type: string
                      example: https://www.example.com/ad89afgt
                    amount:
                      type: integer
                      example: 1234
                    totalEarnedPoints:
                      type: integer
                      example: 3000
                  example:
                    - id: ad89afgt
                      email:
                      status: SIGND_UP
                      nickname:
                      iconUrl:
                      amount: 1000
                      totalEarnedPoints: 1000
                    - id: ad89afgt
                      email: user@gmail.com
                      status: REGISTERED
                      nickname: スタールくん
                      iconUrl:
                      amount: 2000
                      totalEarnedPoints: 2000
                    - id: ad89afgt
                      email: user@gmail.com
                      status: VERIFIED
                      nickname: スタールくん
                      iconUrl: https://www.example.com/ad89afgt
                      amount: 1234
                      totalEarnedPoints: 3000
                    - id: ad89afgt
                      email: user@gmail.com
                      status: ACTIVE
                      nickname: スタールくん
                      iconUrl: https://www.example.com/ad89afgt
                      amount: 1234
                      totalEarnedPoints: 3000
                    - id: ad89afgt
                      email: user@gmail.com
                      status: DISABLED
                      nickname: スタールくん
                      iconUrl: https://www.example.com/ad89afgt
                      amount: 1234
                      totalEarnedPoints: 3000
        '401':
          description: Unauthorized
        '404':
          description: User Not Found
  /admin/transaction/list:
    get:
      tags:
        - Admin
      summary: Read transactions by admin
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: yearMonth
          schema:
            type: integer
            example: 202108
          description: Year and month of items to return
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    userId:
                      type: string
                      example: ad89afgt
                    shopId:
                      type: string
                      example: nikuyokocho-0001
                    corporationId:
                      type: string
                      example: nikuyokocho
                    shopName:
                      type: string
                      example: 渋谷 肉横丁 肉太郎
                    yearMonth:
                      type: integer
                      example: 202108
                    price:
                      type: integer
                      example: 1000
                    usedPoints:
                      type: integer
                      example: 100
                    earnedPoints:
                      type: integer
                      example: 9
                    createdAt:
                      type: string
                      example: "2021-08-27T00:00:00+09:00"
                    updatedAt:
                      type: string
                      example: "2021-08-27T00:00:00+09:00"
        '401':
          description: Unauthorized
        '404':
          description: Transaction Not Found

  # -------------------- Corporation --------------------
  /corporation:
    get:
      tags:
        - Corporation
      summary: Read corporation by corporation
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: nikuyokocho
                  status:
                    type: string
                    example: ACTIVE
                  corporationName:
                    type: string
                    example: 渋谷 肉横丁
                  shops:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: nikuyokocho-0001
                        status:
                          type: string
                          example: ACTIVE
                        shopName:
                          type: string
                          example: 渋谷 肉横丁 肉太郎
                        address:
                          type: string
                          example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                        phone:
                          type: string
                          example: 03-6427-8994
                        openingHours:
                          type: string
                          example: |
                            月～日、祝日、祝前日: 17:00～翌0:00
                            定休日：不定休
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
    put:
      tags:
        - Corporation
      summary: Update corporation by corporation
      security:
        - BearerAuth: []
      requestBody:
        description: Corporation object to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                corporationName:
                  type: string
                  example: 渋谷 肉横丁
              required:
                - corporationName
      responses:
        '200':
          description: Successful Operarion
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: nikuyokocho
                  status:
                    type: string
                    example: ACTIVE
                  corporationName:
                    type: string
                    example: 渋谷 肉横丁
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /corporation/shop/{shopId}:
    put:
      tags:
        - Corporation
      summary: Update shop by corporation
      description:
      security:
        - BearerAuth: []
      requestBody:
        description: Shop object to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shopName:
                  type: string
                  example: 渋谷 肉横丁 肉太郎
                address:
                  type: string
                  example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                phone:
                  type: string
                  example: 03-6427-8994
                openingHours:
                  type: string
                  example: |
                    月～日、祝日、祝前日: 17:00～翌0:00
                    定休日：不定休
              required:
                - shopName
                - address
                - phone
                - openingHours
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: nikuyokocho-0001
                  status:
                    type: string
                    example: ACTIVE
                  shopName:
                    type: string
                    example: 渋谷 肉横丁 肉太郎
                  address:
                    type: string
                    example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                  phone:
                    type: string
                    example: 03-6427-8994
                  openingHours:
                    type: string
                    example: |
                      月～日、祝日、祝前日: 17:00～翌0:00
                      定休日：不定休
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Shop not found
  /corporation/transaction/list:
    get:
      tags:
        - Corporation
      summary: Read transaction list of the corporation
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: yearMonth
          schema:
            type: integer
            example: 202108
          description: Year and month of items to return
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    shopId:
                      type: string
                      example: nikuyokocho-0001
                    corporationId:
                      type: string
                      example: nikuyokocho
                    shopName:
                      type: string
                      example: 渋谷 肉横丁 肉太郎
                    yearMonth:
                      type: integer
                      example: 202108
                    price:
                      type: integer
                      example: 2400
                    usedPoints:
                      type: integer
                      example: 100
                    earnedPoints:
                      type: integer
                      example: 23
                    createdAt:
                      type: string
                      example: "2021-08-01T16:23:56+09:00"
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Transaction not found

  # -------------------- Shop --------------------
  /shop:
    get:
      tags:
        - Shop
      summary: Read shop by shop
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: nikuyokocho-0001
                  corporationId:
                    type: string
                    example: nikuyokocho
                  status:
                    type: string
                    example: ACTIVE
                  corporationName:
                    type: string
                    example: 渋谷 肉横丁
                  shopName:
                    type: string
                    example: 渋谷 肉横丁 肉太郎
                  address:
                    type: string
                    example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                  phone:
                    type: string
                    example: 03-6427-8994
                  openingHours:
                    type: string
                    example: |
                      月～日、祝日、祝前日: 17:00～翌0:00
                      定休日：不定休
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
    put:
      tags:
        - Shop
      summary: Update Shop
      description:
      security:
        - BearerAuth: []
      requestBody:
        description: Shop object to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shopName:
                  type: string
                  example: 渋谷 肉横丁 肉太郎
                address:
                  type: string
                  example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                phone:
                  type: string
                  example: 03-6427-8994
                openingHours:
                  type: string
                  example: |
                    月～日、祝日、祝前日: 17:00～翌0:00
                    定休日：不定休
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: nikuyokocho-0001
                  corporationId:
                    type: string
                    example: nikuyokocho
                  status:
                    type: string
                    example: ACTIVE
                  shopName:
                    type: string
                    example: 渋谷 肉横丁 肉太郎
                  address:
                    type: string
                    example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                  phone:
                    type: string
                    example: 03-6427-8994
                  openingHours:
                    type: string
                    example: |
                      月～日、祝日、祝前日: 17:00～翌0:00
                      定休日：不定休
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /shop/transaction/list:
    get:
      tags:
        - Shop
      summary: Read transaction list of the shop
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: yearMonth
          schema:
            type: integer
            example: 202108
          description: Year and month of items to return
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    yearMonth:
                      type: integer
                      example: 202108
                    price:
                      type: integer
                      example: 2400
                    usedPoints:
                      type: integer
                      example: 100
                    earnedPoints:
                      type: integer
                      example: 23
                    createdAt:
                      type: string
                      example: "2021-08-01T16:23:56+09:00"
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Transaction not found
  /shop/user/{userId}:
    get:
      tags:
        - Shop
      summary: Read user by shop
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            example: ad89afgt
          description: User ID of user to return
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: ad89afgt
                  status:
                    type: string
                    example: ACTIVE
                  nickname:
                    type: string
                    example: スタールくん
                  amount:
                    type: integer
                    example: 1234
              examples:
                ActiveUser:
                  summary: 本会員登録済みユーザー
                  value:
                    id: ad89afgt
                    status: ACTIVE
                    nickname: スタールくん
                    amount: 1234
                SignedUpUser:
                  summary: 本会員登録していないユーザー
                  value:
                    id: ad89afgt
                    status: SIGND_UP
                    nickname:
                    amount: 1234
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /shop/transaction:
    post:
      tags:
        - Shop
      summary: Create transaction by shop
      security:
        - BearerAuth: []
      requestBody:
        description: Transaction object to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: ad89afgt
                price:
                  type: integer
                  example: 2400
                usedPoints:
                  type: integer
                  example: 100
              required:
                - userId
                - price
                - usedPoints
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  userId:
                    type: string
                    example: ad89afgt
                  shopId:
                    type: string
                    example: nikuyokocho-0001
                  corporationId:
                    type: string
                    example: nikuyokocho
                  yearMonth:
                    type: integer
                    example: 202108
                  price:
                    type: integer
                    example: 2400
                  usedPoints:
                    type: integer
                    example: 100
                  earnedPoints:
                    type: integer
                    example: 23
                  createdAt:
                    type: string
                    example: "2021-08-27T00:00:00+09:00"
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /shop/transaction/{transactionId}:
    put:
      tags:
        - Shop
      summary: Update transaction by shop
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: transactionId
          description: Transaction ID
          required: true
          schema:
            type: string
            example: nikuyokocho-0001-20210827000000
      requestBody:
        description: Transaction object to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                price:
                  type: integer
                  example: 2400
                usedPoints:
                  type: integer
                  example: 200
              required:
                - price
                - usedPoints
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  userId:
                    type: string
                    example: ad89afgt
                  shopId:
                    type: string
                    example: nikuyokocho-0001
                  corporationId:
                    type: string
                    example: nikuyokocho
                  yearMonth:
                    type: integer
                    example: 202108
                  price:
                    type: integer
                    example: 2400
                  usedPoints:
                    type: integer
                    example: 200
                  earnedPoints:
                    type: integer
                    example: 22
                  createdAt:
                    type: string
                    example: "2021-08-27T12:34:56+09:00"
                  updatedAt:
                    type: string
                    example: "2021-08-27T12:37:39+09:00"
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Transaction not found

  # -------------------- User --------------------
  /user:
    get:
      tags:
        - User
      summary: Read user by user
      description:
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: ad89afgt
                  status:
                    type: string
                    example: ACTIVE
                  initialPassword:
                    type: string
                    example: P@ssw0rd
                  email:
                    type: string
                    example: user@gmail.com
                  nickname:
                    type: string
                    example: スタールくん
                  iconUrl:
                    type: string
                    example: https://www.example.com/ad89afgt
                  amount:
                    type: integer
                    example: 1234
              examples:
                ActiveUser:
                  summary: 本会員登録済みユーザー
                  value:
                    id: ad89afgt
                    email: user@gmail.com
                    status: ACTIVE
                    initialPassword: P@ssw0rd
                    nickname: スタールくん
                    iconUrl: https://www.example.com/ad89afgt
                    amount: 1234
                SignedUpUser:
                  summary: 本会員登録していないユーザー
                  value:
                    id: ad89afgt
                    email:
                    status: SIGND_UP
                    initialPassword: P@ssw0rd
                    nickname:
                    iconUrl:
                    amount: 1234
        '401':
          description: Unauthorized
  /user/update-nickname:
    put:
      tags:
        - User
      summary: Update nickname by user
      security:
        - BearerAuth: []
      requestBody:
        description: New nickname
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
                  example: スタールちゃん
              required:
                - nickname
      responses:
        '200':
          description: Successful Operation
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /user/upload-icon-img:
    put:
      tags:
        - User
      summary: Upload user icon image by user
      security:
        - BearerAuth: []
      requestBody:
        description: User icon image data to update
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                iconImg:
                  type: string
                  format: binary
            encoding:
              iconImg:
                contentType: image/png, image/jpeg, image/svg+xml, image/gif
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  iconUrl:
                    type: string
                    example: https://www.example.com/ad89afgt
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /user/shop/list:
    get:
      tags:
        - User
      summary: Read nearby shops by user
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: latitude
          schema:
            type: float
            example: 123.456789
          description: latitude
        - in: query
          name: longitude
          schema:
            type: float
            example: 123.456789
          description: longitude
        - in: query
          name: scale
          schema:
            type: float
            example: 15.1
          description: Zoom scale
        - in: query
          name: limit
          schema:
            type: integer
            example: 100
          description: The number of items to return
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: nikuyokocho-0001
                    status:
                      type: string
                      example: ACTIVE
                    shopName:
                      type: string
                      example: 渋谷 肉横丁 肉太郎
                    address:
                      type: string
                      example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                    phone:
                      type: string
                      example: 03-6427-8994
                    openingHours:
                      type: string
                      example: |
                        月～日、祝日、祝前日: 17:00～翌0:00
                        定休日：不定休
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Shop Not Found
  /user/transaction/list:
    get:
      tags:
        - User
      summary: Read transaction list by user
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: yearMonth
          schema:
            type: integer
            example: 202108
          description: Year and month of items to return
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    shopId:
                      type: string
                      example: nikuyokocho-0001
                    shopName:
                      type: string
                      example: 渋谷 肉横丁 肉太郎
                    yearMonth:
                      type: integer
                      example: 202108
                    price:
                      type: integer
                      example: 2400
                    usedPoints:
                      type: integer
                      example: 100
                    earnedPoints:
                      type: integer
                      example: 23
                    createdAt:
                      type: string
                      example: "2021-08-27T12:34:56+09:00"
                    updatedAt:
                      type: string
                      example: "2021-08-27T12:37:39+09:00"
        '401':
          description: Unauthorized
        '404':
          description: Not Found

tags:
  - name: HealthCheck
    description: Health check
  - name: AuthAdmin
    description: Authentication/Authorization of admin
  - name: AuthCorporation
    description: Authentication/Authorization of corporation
  - name: AuthShop
    description: Authentication/Authorization of shop
  - name: AuthUser
    description: Authentication/Authorization of user

  - name: Admin
    description: Endpoints to use in AdminApp
  - name: Corporation
    description: Endpoints to use in BizApp when corporation sign in
  - name: Shop
    description: Endpoints to use in BizApp when shop sign in
  - name: User
    description: Endpoints to use in UserApp

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        description:
          type: string

    HealthCheckResponse:
      type: object
      properties:
        message:
          type: string
          example: Success

    AdminSignInRequest:
      type: object
      properties:
        id:
          type: string
          example: admin
        password:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
      required:
        - id
        - password
    AdminSignInResponse:
      type: object
      properties:
        idToken:
          type: string
          example: dmcxd329ujdmkemkd349r
        refreshToken:
          type: string
          example: dn43ud8uj32nk2je
    RefreshToken:
      type: object
      properties:
        refreshToken:
          type: string
          example: dn43ud8uj32nk2je
      required:
        - refreshToken
    SignOutResponse:
      type: object
      properties:
        message:
          type: string
          example: Signed out successfully

    CorporationSignUpRequest:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho
        corporationName:
          type: string
          example: 渋谷 肉横丁
      required:
        - id
        - corporationName
    CorporationSignUpResponse:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho
        status:
          type: string
          example: REGISTERED
        initialPassword:
          type: string
          example: P@ssw0rd
        corporationName:
          type: string
          example: 渋谷 肉横丁
    CorporationSignInRequest:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho
        password:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
      required:
        - id
        - password
    CorporationSignInResponse:
      type: object
      properties:
        initialSignIn:
          type: boolean
          example: true
        session:
          type: string
          example: AYABeEG4Uc9u9f-1S6Cyj3G5i8IAHQABAAdTZXJ2aWNlABBDb2duaXRvVXNlclBvb
        idToken:
          type: string
          example: dmcxd329ujdmkemkd349r
        accessToken:
          type: string
          example: eyJz9sdfsdfsdfsd
        refreshToken:
          type: string
          example: dn43ud8uj32nk2je
    CorporationResetPasswordRequest:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho
        newPassword:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
        session:
          type: string
          example: AYABeEG4Uc9u9f-1S6Cyj3G5i8IAHQABAAdTZXJ2aWNlABBDb2duaXRvVXNlclBvb
      required:
        - id
        - newPassword
        - session
    CorporationResetPasswordResponse:
      type: object
      properties:
        idToken:
          type: string
          example: dmcxd329ujdmkemkd349r
        refreshToken:
          type: string
          example: dn43ud8uj32nk2je
    CorporationActivateResponse:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho
        status:
          type: string
          example: ACTIVE
    CorporationDisableResponse:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho
        status:
          type: string
          example: DISABLED
        shops:
          type: array
          items:
            type: object
            properties:
              shopId:
                type: string
                example: nikuyokocho-0001
              status:
                type: string
                example: DISABLED
    CorporationChangePasswordRequest:
      type: object
      properties:
        previousPassword:
          type: string
          example: P@ssw0rd
        newPassword:
          type: string
          example: newP@ssw0rd
        accessToken:
          type: string
          example: eyJz9sdfsdfsdfsd
      required:
        - previousPassword
        - newPassword
        - accessToken

    ShopSignUpRequest:
      type: object
      properties:
        corporationId:
          type: string
          example: nikuyokocho
        id:
          type: string
          example: nikuyokocho-0001
        shopName:
          type: string
          example: 渋谷 肉横丁 肉太郎
        address:
          type: string
          example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
        phone:
          type: string
          example: 03-6427-8994
        openingHours:
          type: string
          example: |
            月～日、祝日、祝前日: 17:00～翌0:00
            定休日：不定休
      required:
        - corporationId
        - id
        - shopName
    ShopSignUpResponse:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho-0001
        corporationId:
          type: string
          example: nikuyokocho
        status:
          type: string
          example: REGISTERED
        initialPassword:
          type: string
          example: P@ssw0rd
        shopName:
          type: string
          example: 渋谷 肉横丁 肉太郎
        address:
          type: string
          example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
        phone:
          type: string
          example: 03-6427-8994
        openingHours:
          type: string
          example: |
            月～日、祝日、祝前日: 17:00～翌0:00
            定休日：不定休
    ShopSignInRequest:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho-0001
        password:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
      required:
        - id
        - password
    ShopSignInResponse:
      type: object
      properties:
        initialSignIn:
          type: boolean
          example: true
        session:
          type: string
          example: AYABeEG4Uc9u9f-1S6Cyj3G5i8IAHQABAAdTZXJ2aWNlABBDb2duaXRvVXNlclBvb
        idToken:
          type: string
          example: dmcxd329ujdmkemkd349r
        accessToken:
          type: string
          example: eyJz9sdfsdfsdfsd
        refreshToken:
          type: string
          example: dn43ud8uj32nk2je
    ShopResetPasswordRequest:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho-0001
        newPassword:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
        session:
          type: string
          example: AYABeEG4Uc9u9f-1S6Cyj3G5i8IAHQABAAdTZXJ2aWNlABBDb2duaXRvVXNlclBvb
      required:
        - id
        - newPassword
        - session
    ShopResetPasswordResponse:
      type: object
      properties:
        idToken:
          type: string
          example: dmcxd329ujdmkemkd349r
        refreshToken:
          type: string
          example: dn43ud8uj32nk2je
    ShopActivateResponse:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho-0001
        status:
          type: string
          example: ACTIVE
    ShopDisableResponse:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho-0001
        status:
          type: string
          example: DISABLED
    ShopChangePasswordRequest:
      type: object
      properties:
        previousPassword:
          type: string
          example: P@ssw0rd
        newPassword:
          type: string
          example: newP@ssw0rd
        accessToken:
          type: string
          example: eyJz9sdfsdfsdfsd
      required:
        - previousPassword
        - newPassword
        - accessToken

    UserSignUpRequest:
      type: object
      properties:
        deviceId:
          type: string
          example: 3K0XXXXX-83XX-HEXX-KIXX-29KH83XXXXXX
      required:
        - deviceId
    UserSignUpResponse:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        initialPassword:
          type: string
          example: P@ssw0rd
        status:
          type: string
          example: SIGND_UP
    UserSignInRequest:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        password:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
      required:
        - id
        - password
    UserSignInResponse:
      type: object
      properties:
        idToken:
          type: string
          example: dmcxd329ujdmkemkd349r
        accessToken:
          type: string
          example: eyJz9sdfsdfsdfsd
        refreshToken:
          type: string
          example: dn43ud8uj32nk2je
    UserRegisterRequest:
      type: object
      properties:
        email:
          type: string
          example: user@gmail.com
        accessToken:
          type: string
          example: eyJz9sdfsdfsdfsd
      required:
        - email
        - accessToken
    UserRegisterResponse:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        email:
          type: string
          example: user@gmail.com
        status:
          type: string
          example: REGISTERED
    UserResendCodeRequest:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJz9sdfsdfsdfsd
      required:
        - accessToken
    UserResendCodeResponse:
      type: object
      properties:
        message:
          type: string
          example: Resent code successfully
    UserVerifyRequest:
      type: object
      properties:
        code:
          type: string
          example: 123456
        accessToken:
          type: string
          example: eyJz9sdfsdfsdfsd
      required:
        - code
        - accessToken
    UserVerifyResponse:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        email:
          type: string
          example: user@gmail.com
        status:
          type: string
          example: VERIFIED
    UserChangePasswordRequest:
      type: object
      properties:
        prevPassword:
          type: string
          example: b03ddf3c
        newPassword:
          type: string
          example: fb4b7342
        accessToken:
          type: string
          example: eyJz9sdfsdfsdfsd
      required:
        - prevPassword
        - newPassword
        - accessToken
    UserChangePasswordResponse:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        status:
          type: string
          example: ACTIVE
    UserChangeEmailRequest:
      type: object
      properties:
        email:
          type: string
          example: new@gmail.com
        accessToken:
          type: string
          example: eyJz9sdfsdfsdfsd
      required:
        - email
        - accessToken
    UserChangeEmailResponse:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        email:
          type: string
          example: new@gmail.com
        status:
          type: string
          example: REQUIRE_VERIFICATION
        prevEmail:
          type: string
          example: user@gmail.com
    AdminDisableUserResponse:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        status:
          type: string
          example: DISABLED
    AdminActivateUserResponse:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        status:
          type: string
          example: ACTIVE
    UserDeleteResponse:
      type: object
      properties:
        message:
          type: string
          example: User successfully disabled to be deleted in 30 days

    Corporation:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho
        status:
          type: string
          example: ACTIVE
        initialPassword:
          type: string
          example: P@ssw0rd
        corporationName:
          type: string
          example: 渋谷 肉横丁
    Shop:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho-0001
        corporationId:
          type: string
          example: nikuyokocho
        status:
          type: string
          example: ACTIVE
        initialPassword:
          type: string
          example: P@ssw0rd
        shopName:
          type: string
          example: 渋谷 肉横丁 肉太郎
        address:
          type: string
          example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
        phone:
          type: string
          example: 03-6427-8994
        openingHours:
          type: string
          example: |
            月～日、祝日、祝前日: 17:00～翌0:00
            定休日：不定休
    User:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        deviceId:
          type: string
          example: 3K0XXXXX-83XX-HEXX-KIXX-29KH83XXXXXX
        email:
          type: string
          example: user@gmail.com
        status:
          type: string
          example: ACTIVE
        initialPassword:
          type: string
          example: P@ssw0rd
        prevEmail:
          type: string
          example: prev@gmail.com
        nickname:
          type: string
          example: スタールくん
        iconUrl:
          type: string
          example: https://www.example.com/ad89afgt
        amount:
          type: integer
          example: 1234
    Transaction:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho-0001-20210827000000
        userId:
          type: string
          example: ad89afgt
        shopId:
          type: string
          example: nikuyokocho-0001
        corporationId:
          type: string
          example: nikuyokocho
        yearMonth:
          type: integer
          example: 202108
        price:
          type: integer
          example: 1000
        usedPoints:
          type: integer
          example: 100
        earnedPoints:
          type: integer
          example: 9
        createdAt:
          type: string
          example: "2021-08-27T00:00:00+09:00"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
