openapi: 3.0.0
info:
  title: Starl-Backend API Document
  description: This is API Document of Starl-Backend
  version: 1.0.15

servers:
  - url: https://api.starl.co.jp/v1

paths:
  # -------------------- AuthAdmin --------------------
  /admin/signin:
    post:
      tags:
        - AuthAdmin
      summary: Admin sign in
      requestBody:
        description: Admin auth info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminSignInRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminSignInResponse'
        '400':
          description: Bad Request
  /admin/signout:
    post:
      tags:
        - AuthAdmin
      summary: Admin sign out
      security:
        - BearerAuth: []
      requestBody:
        description: RefreshToken
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: Successful Operation
        '400':
            description: Bad Request (RefreshToken is missing.)
        '401':
          description: Unauthorized (RefreshToken is invalid.)

  # -------------------- AuthCorporation --------------------
  /admin/corporation/signup:
    post:
      tags:
        - AuthCorporation
      summary: Sign up corporation by admin
      security:
        - BearerAuth: []
      requestBody:
        description: Corporation object to signup
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CorporationSignUpRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporationSignUpResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /corporation/signin:
    post:
      tags:
        - AuthCorporation
      summary: Sign in corporation
      requestBody:
        description: Corporation auth info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CorporationSignInRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporationSignInResponse'
              examples:
                CorporationInitialSignInResponse:
                  summary: 初回ログイン時のレスポンス
                  value:
                    initialSignIn: true
                    session: AYABeEG4Uc9u9f-1S6Cyj3G5i8IAHQABAAdTZXJ2aWNlABBDb2duaXRvVXNlclBvb
                    idToken:
                    refreshToken:
                CorporationSignInResponse:
                  summary: 通常のレスポンス
                  value:
                    initialSignIn: false
                    session:
                    idToken: dmcxd329ujdmkemkd349r
                    refreshToken: dn43ud8uj32nk2je
        '400':
          description: Bad Request
        '401':
          description: Unauthorized (ID or password is invalid.)
  /corporation/reset-password:
    post:
      tags:
        - AuthCorporation
      summary: Corporation reset password
      requestBody:
        description: Corporation auth info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CorporationResetPasswordRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporationResetPasswordResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized (ID or session is invalid.)
  /admin/corporation/{corporationId}/activate:
    put:
      tags:
        - AuthCorporation
      summary: Activate corporation by admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: corporationId
          description: Corporation ID
          required: true
          schema:
            type: string
            example: nikuyokocho
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporationActivateResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Corporation not found
  /corporation/activate:
    put:
      tags:
        - AuthCorporation
      summary: Activate corporation by corporation
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporationActivateResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /admin/corporation/{corporationId}/disable:
    put:
      tags:
        - AuthCorporation
      summary: Disable corporation by admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: corporationId
          description: Corporation ID
          required: true
          schema:
            type: string
            example: nikuyokocho
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporationDisableResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Corporation not found
  /corporation/disable:
    put:
      tags:
        - AuthCorporation
      summary: Disable corporation by corporation
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporationDisableResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /corporation/signout:
    post:
      tags:
        - AuthCorporation
      summary: Corporation sign out
      security:
        - BearerAuth: []
      requestBody:
        description: RefreshToken
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: Successful Operation
        '400':
          description: Bad Request (RefreshToken is missing.)
        '401':
          description: Unauthorized (RefreshToken is invalid.)

  # -------------------- AuthShop --------------------
  /admin/shop/signup:
    post:
      tags:
        - AuthShop
      summary: Sign up shop by admin
      security:
        - BearerAuth: []
      requestBody:
        description: Shop object to signup
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShopSignUpRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopSignUpResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /shop/signin:
    post:
      tags:
        - AuthShop
      summary: Sign in shop
      requestBody:
        description: Shop auth info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShopSignInRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopSignInResponse'
              examples:
                ShopInitialSignInResponse:
                  summary: 初回ログイン時のレスポンス
                  value:
                    initialSignIn: true
                    session: AYABeEG4Uc9u9f-1S6Cyj3G5i8IAHQABAAdTZXJ2aWNlABBDb2duaXRvVXNlclBvb
                    idToken:
                    refreshToken:
                ShopSignInResponse:
                  summary: 通常のレスポンス
                  value:
                    initialSignIn: false
                    session:
                    idToken: dmcxd329ujdmkemkd349r
                    refreshToken: dn43ud8uj32nk2je
        '400':
          description: Bad Request
        '401':
          description: Unauthorized (ID or password is invalid.)
  /shop/reset-password:
    post:
      tags:
        - AuthShop
      summary: Shop reset password
      requestBody:
        description: Shop auth info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShopResetPasswordRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopResetPasswordResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized (ID or session is invalid.)
  /admin/shop/{shopId}/activate:
    put:
      tags:
        - AuthShop
      summary: Activate shop by admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: shopId
          description: Shop ID
          required: true
          schema:
            type: string
            example: nikuyokocho-0001
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopActivateResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Shop not found
  /corporation/shop/{shopId}/activate:
    put:
      tags:
        - AuthShop
      summary: Activate shop by corporation
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopActivateResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /admin/shop/{shopId}/disable:
    put:
      tags:
        - AuthShop
      summary: Disable shop by admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: shopId
          description: Shop ID
          required: true
          schema:
            type: string
            example: nikuyokocho-0001
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopDisableResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Shop not found
  /corporation/shop/{shopId}/disable:
    put:
      tags:
        - AuthShop
      summary: Disable shop by corporation
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopDisableResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /shop/signout:
    post:
      tags:
        - AuthShop
      summary: Shop sign out
      security:
        - BearerAuth: []
      requestBody:
        description: RefreshToken
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: Successful Operation
        '400':
          description: Bad Request (RefreshToken is missing.)
        '401':
          description: Unauthorized (RefreshToken is invalid.)

  # -------------------- AuthUser --------------------
  /user/signup:
    post:
      tags:
        - AuthUser
      summary: Sign up user
      requestBody:
        description: User object to signup
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignUpRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSignUpResponse'
        '400':
          description: Bad Request
  /user/signin:
    post:
      tags:
        - AuthUser
      summary: Sign in user
      requestBody:
        description: User auth info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignInRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSignInResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized (ID or password is invalid.)
  /user/confirm:
    post:
      tags:
        - AuthUser
      summary: User registration
      security:
        - BearerAuth: []
      requestBody:
        description: User account info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserConfirmRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConfirmResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /user/activate:
    post:
      tags:
        - AuthUser
      summary: User confirmation
      requestBody:
        description: User confirmation code and new password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserActivateRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserActivateResponse'
        '400':
          description: Bad Request
  /admin/user/{userId}/disable:
    put:
      tags:
        - AuthUser
      summary: Disable user by admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          description: User ID
          required: true
          schema:
            type: string
            example: ad89afgt
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUserDisableResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: User not found
  /admin/user/{userId}/activate:
    put:
      tags:
        - AuthUser
      summary: Activate user by admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          description: User ID
          required: true
          schema:
            type: string
            example: ad89afgt
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUserActivateResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: User not found
  /user/signout:
    post:
      tags:
        - AuthUser
      summary: User sign out
      security:
        - BearerAuth: []
      requestBody:
        description: RefreshToken
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: Successful Operation
        '400':
          description: Bad Request (RefreshToken is missing.)
        '401':
          description: Unauthorized (RefreshToken is invalid.)

  # -------------------- Admin --------------------
  /admin/corporation/list:
    get:
      tags:
        - Admin
      summary: Read corporations by admin
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: yearMonth
          schema:
            type: integer
            example: 202107
          required: true
          description: Year and month of items to return
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: nikuyokocho
                    status:
                      type: string
                      example: ACTIVE
                    corporationName:
                      type: string
                      example: 渋谷 肉横丁
                    shopsCount:
                      type: integer
                      example: 3
                    yearMonth:
                      type: integer
                      example: 202107
                    totalSales:
                      type: integer
                      example: 1234567
                    totalEarnedPoints:
                      type: integer
                      example: 12345
                    totalUsedPoints:
                      type: integer
                      example: 3000
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Corporation Not Found
  /admin/corporation/{corporationId}:
    put:
      tags:
        - Admin
      summary: Update corporation by admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: corporationId
          description: Corporation ID
          required: true
          schema:
            type: string
            example: nikuyokocho
      requestBody:
        description: Corporation object to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                corporationName:
                  type: string
                  example: 渋谷 肉横丁
              required:
                - corporationName
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: nikuyokocho
                  status:
                    type: string
                    example: ACTIVE
                  corporationName:
                    type: string
                    example: 渋谷 肉横丁
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Corporation not found
    delete:
      tags:
        - Admin
      summary: Delete corporation by admin
      security:
        - BearerAuth: []
      parameters:
        - name: corporationId
          in: path
          description: Corporation ID
          required: true
          schema:
            type: string
            example: nikuyokocho
      responses:
        '200':
          description: Successful Operation
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Corporation not found
  /admin/shop/list:
    get:
      tags:
        - Admin
      summary: Read shops by admin
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: corporationId
          schema:
            type: string
            example: nikuyokocho
          description: Corporation ID
        - in: query
          name: yearMonth
          schema:
            type: integer
            example: 202107
          required: true
          description: Year and month of items to return
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: nikuyokocho-0001
                    corporationId:
                      type: string
                      example: nikuyokocho
                    status:
                      type: string
                      example: ACTIVE
                    corporationName:
                      type: string
                      example: 渋谷 肉横丁
                    shopName:
                      type: string
                      example: 渋谷 肉横丁 肉太郎
                    address:
                      type: string
                      example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                    phone:
                      type: string
                      example: 03-6427-8994
                    openingHours:
                      type: string
                      example: |
                        月～日、祝日、祝前日: 17:00～翌0:00
                        定休日：不定休
                    yearMonth:
                      type: integer
                      example: 202107
                    totalSales:
                      type: integer
                      example: 1234567
                    totalEarnedPoints:
                      type: integer
                      example: 12345
                    totalUsedPoints:
                      type: integer
                      example: 3000
        '401':
          description: Unauthorized
        '404':
          description: Corporation Not Found
  /admin/shop/{shopId}:
    put:
      tags:
        - Admin
      summary: Update shop by admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: shopId
          description: Shop ID
          required: true
          schema:
            type: string
            example: nikuyokocho-0001
      requestBody:
        description: Shop object to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shopName:
                  type: string
                  example: 渋谷 肉横丁 肉太郎
                address:
                  type: string
                  example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                phone:
                  type: string
                  example: 03-6427-8994
                openingHours:
                  type: string
                  example: |
                    月～日、祝日、祝前日: 17:00～翌0:00
                    定休日：不定休
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: nikuyokocho-0001
                  status:
                    type: string
                    example: ACTIVE
                  shopName:
                    type: string
                    example: 渋谷 肉横丁 肉太郎
                  address:
                    type: string
                    example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                  phone:
                    type: string
                    example: 03-6427-8994
                  openingHours:
                    type: string
                    example: |
                      月～日、祝日、祝前日: 17:00～翌0:00
                      定休日：不定休
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Shop not found
    delete:
      tags:
        - Admin
      summary: Delete shop by admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: shopId
          description: Shop ID
          required: true
          schema:
            type: string
            example: nikuyokocho-0001
      responses:
        '200':
          description: Successful Operation
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Shop not found
  /admin/user/list:
    get:
      tags:
        - Admin
      summary: Read users by admin
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: ad89afgt
                    status:
                      type: string
                      example: ACTIVE
                    email:
                      type: string
                      example: user@gmail.com
                    nickname:
                      type: string
                      example: スタールくん
                    iconURL:
                      type: string
                      example: https://www.example.com/ad89afgt
                    amount:
                      type: integer
                      example: 1234
                    totalEarnedPoints:
                      type: integer
                      example: 3000
                  example:
                    - id: ad89afgt
                      status: REGISTERED
                      email:
                      nickname:
                      iconURL:
                      amount: 1000
                      totalEarnedPoints: 1000
                    - id: ad89afgt
                      status: CONFIRMED
                      email: user@gmail.com
                      nickname: スタールくん
                      iconURL:
                      amount: 2000
                      totalEarnedPoints: 2000
                    - id: ad89afgt
                      status: ACTIVE
                      email: user@gmail.com
                      nickname: スタールくん
                      iconURL: https://www.example.com/ad89afgt
                      amount: 1234
                      totalEarnedPoints: 3000
                    - id: ad89afgt
                      status: DISABLED
                      email: user@gmail.com
                      nickname: スタールくん
                      iconURL: https://www.example.com/ad89afgt
                      amount: 1234
                      totalEarnedPoints: 3000
        '401':
          description: Unauthorized
        '404':
          description: User Not Found

  # -------------------- Corporation --------------------
  /corporation:
    get:
      tags:
        - Corporation
      summary: Read corporation by corporation
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: yearMonth
          schema:
            type: integer
            example: 202107
          required: true
          description: Year and month of items to return
        - in: query
          name: shopId
          schema:
            type: string
            example: nikuyokocho-0001
          description: Shop ID to filter by
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: nikuyokocho
                  status:
                    type: string
                    example: ACTIVE
                  corporationName:
                    type: string
                    example: 渋谷 肉横丁
                  yearMonth:
                    type: integer
                    example: 202107
                  totalSales:
                    type: integer
                    example: 1234567
                  totalEarnedPoints:
                    type: integer
                    example: 12345
                  totalUsedPoints:
                    type: integer
                    example: 3000
                  shops:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: nikuyokocho-0001
                        status:
                          type: string
                          example: ACTIVE
                        shopName:
                          type: string
                          example: 渋谷 肉横丁 肉太郎

        '400':
          description: Bad Request
        '401':
          description: Unauthorized
    put:
      tags:
        - Corporation
      summary: Update corporation by corporation
      security:
        - BearerAuth: []
      requestBody:
        description: Corporation object to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                corporationName:
                  type: string
                  example: 渋谷 肉横丁
              required:
                - corporationName
      responses:
        '200':
          description: Successful Operarion
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: nikuyokocho
                  status:
                    type: string
                    example: ACTIVE
                  corporationName:
                    type: string
                    example: 渋谷 肉横丁
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /corporation/transaction/list:
    get:
      tags:
        - Corporation
      summary: Read transaction list of the corporation
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: yearMonth
          schema:
            type: integer
            example: 202107
          required: true
          description: Year and month of items to return
        - in: query
          name: shopId
          schema:
            type: string
            example: nikuyokocho-0001
          description: Shop ID to filter by
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    shopId:
                      type: string
                      example: nikuyokocho-0001
                    shopName:
                      type: string
                      example: 渋谷 肉横丁 肉太郎
                    price:
                      type: integer
                      example: 2400
                    usedPoints:
                      type: integer
                      example: 100
                    createdAt:
                      type: string
                      example: "2021-06-01T16:23:56+09:00"
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Transaction not found
  /corporation/shop/list:
    get:
      tags:
        - Corporation
      summary: Read shop list of the corporation
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: yearMonth
          schema:
            type: integer
            example: 202107
          required: true
          description: Year and month of item to return
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: nikuyokocho-0001
                    status:
                      type: string
                      example: ACTIVE
                    shopName:
                      type: string
                      example: 渋谷 肉横丁 肉太郎
                    address:
                      type: string
                      example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                    phone:
                      type: string
                      example: 03-6427-8994
                    openingHours:
                      type: string
                      example: |
                        月～日、祝日、祝前日: 17:00～翌0:00
                        定休日：不定休
                    yearMonth:
                      type: integer
                      example: 202107
                    totalSales:
                      type: integer
                      example: 1234567
                    totalEarnedPoints:
                      type: integer
                      example: 12345
                    totalUsedPoints:
                      type: integer
                      example: 3000
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Shop not found
  /corporation/shop/{shopId}:
    get:
      tags:
        - Corporation
      summary: Read shop by corporation
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: yearMonth
          schema:
            type: integer
            example: 202107
          description: Year and month of items to return
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: nikuyokocho-0001
                  status:
                    type: string
                    example: ACTIVE
                  shopName:
                    type: string
                    example: 渋谷 肉横丁 肉太郎
                  address:
                    type: string
                    example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                  phone:
                    type: string
                    example: 03-6427-8994
                  openingHours:
                    type: string
                    example: |
                      月～日、祝日、祝前日: 17:00～翌0:00
                      定休日：不定休
                  yearMonth:
                    type: integer
                    example: 202107
                  totalSales:
                    type: integer
                    example: 1234567
                  totalEarnedPoints:
                    type: integer
                    example: 12345
                  totalUsedPoints:
                    type: integer
                    example: 3000
              examples:
                WithoutTransactionData:
                  summary: 会計情報なし
                  description: yearMonthなし
                  value:
                    id: nikuyokocho-0001
                    status: ACTIVE
                    shopName: 渋谷 肉横丁 肉太郎
                    address: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                    phone: 03-6427-8994
                    openingHours: |
                      月～日、祝日、祝前日: 17:00～翌0:00
                      定休日：不定休
                    yearMonth:
                    totalSales:
                    totalEarnedPoints:
                    totalUsedPoints:
                WithTransactionData:
                  summary: 会計情報あり
                  description: yearMonthをクエリパラメーターに含めた場合
                  value:
                    id: nikuyokocho-0001
                    status: ACTIVE
                    shopName: 渋谷 肉横丁 肉太郎
                    address: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                    phone: 03-6427-8994
                    openingHours: |
                      月～日、祝日、祝前日: 17:00～翌0:00
                      定休日：不定休
                    yearMonth: 202107
                    totalSales: 1234567
                    totalEarnedPoints: 12345
                    totalUsedPoints: 3000
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Shop not found
    put:
      tags:
        - Corporation
      summary: Update shop by corporation
      description:
      security:
        - BearerAuth: []
      requestBody:
        description: Shop object to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shopName:
                  type: string
                  example: 渋谷 肉横丁 肉太郎
                address:
                  type: string
                  example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                phone:
                  type: string
                  example: 03-6427-8994
                openingHours:
                  type: string
                  example: |
                    月～日、祝日、祝前日: 17:00～翌0:00
                    定休日：不定休
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: nikuyokocho-0001
                  status:
                    type: string
                    example: ACTIVE
                  shopName:
                    type: string
                    example: 渋谷 肉横丁 肉太郎
                  address:
                    type: string
                    example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                  phone:
                    type: string
                    example: 03-6427-8994
                  openingHours:
                    type: string
                    example: |
                      月～日、祝日、祝前日: 17:00～翌0:00
                      定休日：不定休
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Shop not found

  # -------------------- Shop --------------------
  /shop:
    get:
      tags:
        - Shop
      summary: Read shop by shop
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: yearMonth
          schema:
            type: integer
            example: 202107
          required: true
          description: Year and month of items to return
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: nikuyokocho-0001
                  corporationId:
                    type: string
                    example: nikuyokocho
                  status:
                    type: string
                    example: ACTIVE
                  corporationName:
                    type: string
                    example: 渋谷 肉横丁
                  shopName:
                    type: string
                    example: 渋谷 肉横丁 肉太郎
                  address:
                    type: string
                    example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                  phone:
                    type: string
                    example: 03-6427-8994
                  openingHours:
                    type: string
                    example: |
                      月～日、祝日、祝前日: 17:00～翌0:00
                      定休日：不定休
                  yearMonth:
                    type: integer
                    example: 202107
                  totalSales:
                    type: integer
                    example: 1234567
                  totalEarnedPoints:
                    type: integer
                    example: 12345
                  totalUsedPoints:
                    type: integer
                    example: 3000
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
    put:
      tags:
        - Shop
      summary: Update Shop
      description:
      security:
        - BearerAuth: []
      requestBody:
        description: Shop object to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shopName:
                  type: string
                  example: 渋谷 肉横丁 肉太郎
                address:
                  type: string
                  example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                phone:
                  type: string
                  example: 03-6427-8994
                openingHours:
                  type: string
                  example: |
                    月～日、祝日、祝前日: 17:00～翌0:00
                    定休日：不定休
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: nikuyokocho-0001
                  corporationId:
                    type: string
                    example: nikuyokocho
                  status:
                    type: string
                    example: ACTIVE
                  shopName:
                    type: string
                    example: 渋谷 肉横丁 肉太郎
                  address:
                    type: string
                    example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                  phone:
                    type: string
                    example: 03-6427-8994
                  openingHours:
                    type: string
                    example: |
                      月～日、祝日、祝前日: 17:00～翌0:00
                      定休日：不定休
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /shop/user/{userId}:
    get:
      tags:
        - Shop
      summary: Read user by shop
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            example: ad89afgt
          description: User ID of user to return
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: ad89afgt
                  status:
                    type: string
                    example: ACTIVE
                  nickname:
                    type: string
                    example: スタールくん
                  amount:
                    type: integer
                    example: 1234
              examples:
                ActiveUser:
                  summary: 本会員登録済みユーザー
                  value:
                    id: ad89afgt
                    status: ACTIVE
                    nickname: スタールくん
                    amount: 1234
                RegisteredUser:
                  summary: 本会員登録していないユーザー
                  value:
                    id: ad89afgt
                    status: REGISTERED
                    nickname: スタールくん
                    amount: 1234
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /shop/transaction:
    post:
      tags:
        - Shop
      summary: Create transaction by shop
      security:
        - BearerAuth: []
      requestBody:
        description: Transaction object to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: ad89afgt
                price:
                  type: integer
                  example: 2400
                usedPoints:
                  type: integer
                  example: 100
              required:
                - userId
                - price
                - usedPoints
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  userId:
                    type: string
                    example: ad89afgt
                  shopId:
                    type: string
                    example: nikuyokocho-0001
                  price:
                    type: integer
                    example: 2400
                  usedPoints:
                    type: integer
                    example: 100
                  earnedPoints:
                    type: integer
                    example: 23
                  createdAt:
                    type: string
                    example: "2021-08-27T00:00:00+09:00"
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /shop/transaction/{transactionId}:
    put:
      tags:
        - Shop
      summary: Update transaction by shop
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: transactionId
          description: Transaction ID
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Transaction object to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                price:
                  type: integer
                  example: 2400
                usedPoints:
                  type: integer
                  example: 200
              required:
                - price
                - usedPoints
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  userId:
                    type: string
                    example: ad89afgt
                  shopId:
                    type: string
                    example: nikuyokocho-0001
                  price:
                    type: integer
                    example: 2400
                  usedPoints:
                    type: integer
                    example: 200
                  earnedPoints:
                    type: integer
                    example: 22
                  createdAt:
                    type: string
                    example: "2021-08-27T12:34:56+09:00"
                  updatedAt:
                    type: string
                    example: "2021-08-27T12:37:39+09:00"
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Transaction not found

  # -------------------- User --------------------
  /user:
    get:
      tags:
        - User
      summary: Read user by user
      description:
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: ad89afgt
                  status:
                    type: string
                    example: ACTIVE
                  initialPassword:
                    type: string
                    example: P@ssw0rd
                  email:
                    type: string
                    example: user@gmail.com
                  nickname:
                    type: string
                    example: スタールくん
                  iconURL:
                    type: string
                    example: https://www.example.com/ad89afgt
                  amount:
                    type: integer
                    example: 1234
                  earnedPointsThisMonth:
                    type: integer
                    example: 100
                  usedPointsThisMonth:
                    type: integer
                    example: 60
                  visitedShopsThisMonth:
                    type: integer
                    example: 4
              examples:
                ActiveUser:
                  summary: 本会員登録済みユーザー
                  value:
                    id: ad89afgt
                    status: ACTIVE
                    initialPassword: P@ssw0rd
                    email: user@gmail.com
                    nickname: スタールくん
                    iconURL: https://www.example.com/ad89afgt
                    amount: 1234
                    earnedPointsThisMonth: 100
                    usedPointsThisMonth: 60
                    visitedShopsThisMonth: 4
                RegisteredUser:
                  summary: 本会員登録していないユーザー
                  value:
                    id: ad89afgt
                    status: REGISTERED
                    initialPassword: P@ssw0rd
                    email:
                    nickname:
                    iconURL:
                    amount: 1234
                    earnedPointsThisMonth: 100
                    usedPointsThisMonth: 0
                    visitedShopsThisMonth: 4
        '401':
          description: Unauthorized
    delete:
      tags:
        - User
      summary: Delete User
      security:
        - BearerAuth: []
      requestBody:
        description: RefreshToken
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: Successful Operation
        '400':
          description: Bad Request (RefreshToken is missing.)
        '401':
          description: Unauthorized (RefreshToken is invalid.)
  /user/upload-icon-img:
    put:
      tags:
        - User
      summary: Upload user icon image by user
      security:
        - BearerAuth: []
      requestBody:
        description: User icon image data to update
        required: true
        content:
          image/png:
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  iconURL:
                    type: string
                    example: https://www.example.com/ad89afgt
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /user/update-nickname:
    put:
      tags:
        - User
      summary: Update nickname by user
      security:
        - BearerAuth: []
      requestBody:
        description: New nickname
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
                  example: スタールちゃん
              required:
                - nickname
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  nickname:
                    type: string
                    example: スタールちゃん
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /user/shop/list:
    get:
      tags:
        - User
      summary: Read nearby shops by user
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: latitude
          required: true
          schema:
            type: float
            example: 123.456789
          description: latitude
        - in: query
          name: longitude
          required: true
          schema:
            type: float
            example: 123.456789
          description: longitude
        - in: query
          name: scale
          schema:
            type: float
            example: 15.1
          description: Zoom scale
        - in: query
          name: limit
          schema:
            type: integer
            example: 100
          description: The number of items to return
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: nikuyokocho-0001
                    corporationId:
                      type: string
                      example: nikuyokocho
                    status:
                      type: string
                      example: ACTIVE
                    corporationName:
                      type: string
                      example: 渋谷 肉横丁
                    shopName:
                      type: string
                      example: 渋谷 肉横丁 肉太郎
                    address:
                      type: string
                      example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
                    phone:
                      type: string
                      example: 03-6427-8994
                    openingHours:
                      type: string
                      example: |
                        月～日、祝日、祝前日: 17:00～翌0:00
                        定休日：不定休
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Shop Not Found
  /user/transaction/list:
    get:
      tags:
        - User
      summary: Read transaction list by user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    shopId:
                      type: string
                      example: nikuyokocho-0001
                    corporationId:
                      type: string
                      example: nikuyokocho
                    corporationName:
                      type: string
                      example: 渋谷 肉横丁
                    shopName:
                      type: string
                      example: 渋谷 肉横丁 肉太郎
                    price:
                      type: integer
                      example: 2400
                    usedPoints:
                      type: integer
                      example: 100
                    earnedPoints:
                      type: integer
                      example: 23
                    createdAt:
                      type: string
                      example: "2021-08-27T12:34:56+09:00"
                    updatedAt:
                      type: string
                      example: "2021-08-27T12:37:39+09:00"
        '401':
          description: Unauthorized
        '404':
          description: Not Found

tags:
  - name: AuthAdmin
    description: Authentication/Authorization of admin
  - name: AuthCorporation
    description: Authentication/Authorization of corporation
  - name: AuthShop
    description: Authentication/Authorization of shop
  - name: AuthUser
    description: Authentication/Authorization of user

  - name: Admin
    description: Endpoints to use in AdminApp
  - name: Corporation
    description: Endpoints to use in BizApp when corporation sign in
  - name: Shop
    description: Endpoints to use in BizApp when shop sign in
  - name: User
    description: Endpoints to use in UserApp

components:
  schemas:
    AdminSignInRequest:
      type: object
      properties:
        id:
          type: string
          example: admin
        password:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
      required:
        - id
        - password
    AdminSignInResponse:
      type: object
      properties:
        idToken:
          type: string
          example: dmcxd329ujdmkemkd349r
        refreshToken:
          type: string
          example: dn43ud8uj32nk2je
    RefreshToken:
      type: object
      properties:
        refreshToken:
          type: string
          example: dn43ud8uj32nk2je
      required:
        - refreshToken
    CorporationSignUpRequest:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho
        corporationName:
          type: string
          example: 渋谷 肉横丁
      required:
        - id
        - corporationName
    CorporationSignUpResponse:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho
        status:
          type: string
          example: REGISTERED
        initialPassword:
          type: string
          example: P@ssw0rd
        corporationName:
          type: string
          example: 渋谷 肉横丁
    CorporationSignInRequest:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho
        password:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
      required:
        - id
        - password
    CorporationSignInResponse:
      type: object
      properties:
        initialSignIn:
          type: boolean
          example: true
        session:
          type: string
          example: AYABeEG4Uc9u9f-1S6Cyj3G5i8IAHQABAAdTZXJ2aWNlABBDb2duaXRvVXNlclBvb
        idToken:
          type: string
          example: dmcxd329ujdmkemkd349r
        refreshToken:
          type: string
          example: dn43ud8uj32nk2je
    CorporationResetPasswordRequest:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho
        newPassword:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
        session:
          type: string
          example: AYABeEG4Uc9u9f-1S6Cyj3G5i8IAHQABAAdTZXJ2aWNlABBDb2duaXRvVXNlclBvb
      required:
        - id
        - newPassword
        - session
    CorporationResetPasswordResponse:
      type: object
      properties:
        idToken:
          type: string
          example: dmcxd329ujdmkemkd349r
        refreshToken:
          type: string
          example: dn43ud8uj32nk2je
    CorporationActivateResponse:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho
        status:
          type: string
          example: ACTIVE
    CorporationDisableResponse:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho
        status:
          type: string
          example: DISABLED
        shops:
          type: array
          items:
            type: object
            properties:
              shopId:
                type: string
                example: nikuyokocho-0001

    ShopSignUpRequest:
      type: object
      properties:
        corporationId:
          type: string
          example: nikuyokocho
        id:
          type: string
          example: nikuyokocho-0001
        shopName:
          type: string
          example: 渋谷 肉横丁 肉太郎
        address:
          type: string
          example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
        phone:
          type: string
          example: 03-6427-8994
        openingHours:
          type: string
          example: |
            月～日、祝日、祝前日: 17:00～翌0:00
            定休日：不定休
      required:
        - corporationId
        - id
        - shopName
    ShopSignUpResponse:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho-0001
        corporationId:
          type: string
          example: nikuyokocho
        status:
          type: string
          example: REGISTERED
        initialPassword:
          type: string
          example: P@ssw0rd
        shopName:
          type: string
          example: 渋谷 肉横丁 肉太郎
        address:
          type: string
          example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
        phone:
          type: string
          example: 03-6427-8994
        openingHours:
          type: string
          example: |
            月～日、祝日、祝前日: 17:00～翌0:00
            定休日：不定休
    ShopSignInRequest:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho-0001
        password:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
      required:
        - id
        - password
    ShopSignInResponse:
      type: object
      properties:
        initialSignIn:
          type: boolean
          example: true
        session:
          type: string
          example: AYABeEG4Uc9u9f-1S6Cyj3G5i8IAHQABAAdTZXJ2aWNlABBDb2duaXRvVXNlclBvb
        idToken:
          type: string
          example: dmcxd329ujdmkemkd349r
        refreshToken:
          type: string
          example: dn43ud8uj32nk2je
    ShopResetPasswordRequest:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho-0001
        newPassword:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
        session:
          type: string
          example: AYABeEG4Uc9u9f-1S6Cyj3G5i8IAHQABAAdTZXJ2aWNlABBDb2duaXRvVXNlclBvb
      required:
        - id
        - newPassword
        - session
    ShopResetPasswordResponse:
        type: object
        properties:
          idToken:
            type: string
            example: dmcxd329ujdmkemkd349r
          refreshToken:
            type: string
            example: dn43ud8uj32nk2je
    ShopActivateResponse:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho-0001
        status:
          type: string
          example: ACTIVE
    ShopDisableResponse:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho-0001
        status:
          type: string
          example: DISABLED

    UserSignUpRequest:
      type: object
      properties:
        deviceId:
          type: string
          example: 3K0XXXXX-83XX-HEXX-KIXX-29KH83XXXXXX
      required:
        - deviceId
    UserSignUpResponse:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        initialPassword:
          type: string
          example: P@ssw0rd
        status:
          type: string
          example: REGISTERED
    UserSignInRequest:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        password:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
      required:
        - id
        - password
    UserSignInResponse:
      type: object
      properties:
        idToken:
          type: string
          example: dmcxd329ujdmkemkd349r
        refreshToken:
          type: string
          example: dn43ud8uj32nk2je
    UserConfirmRequest:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        email:
          type: string
          example: user@gmail.com
        nickname:
          type: string
          example: スタールくん
      required:
        - id
        - email
        - nickname
    UserConfirmResponse:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        email:
          type: string
          example: user@gmail.com
        nickname:
          type: string
          example: スタールくん
        status:
          type: string
          example: CONFIRMED
    UserActivateRequest:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        code:
          type: string
          example: s8xert6c
        password:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
      required:
        - id
        - code
        - password
    AdminUserDisableResponse:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        status:
          type: string
          example: DISABLED
    AdminUserActivateResponse:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        status:
          type: string
          example: ACTIVE
    UserActivateResponse:
        type: object
        properties:
          idToken:
            type: string
            example: dmcxd329ujdmkemkd349r
          refreshToken:
            type: string
            example: dn43ud8uj32nk2je

    Corporation:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho
        status:
          type: string
          example: ACTIVE
        initialPassword:
          type: string
          example: P@ssw0rd
        corporationName:
          type: string
          example: 渋谷 肉横丁
    Shop:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho-0001
        corporationId:
          type: string
          example: nikuyokocho
        status:
          type: string
          example: ACTIVE
        initialPassword:
          type: string
          example: P@ssw0rd
        shopName:
          type: string
          example: 渋谷 肉横丁 肉太郎
        address:
          type: string
          example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
        phone:
          type: string
          example: 03-6427-8994
        openingHours:
          type: string
          example: |
            月～日、祝日、祝前日: 17:00～翌0:00
            定休日：不定休
    User:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        deviceId:
          type: string
          example: 3K0XXXXX-83XX-HEXX-KIXX-29KH83XXXXXX
        status:
          type: string
          example: ACTIVE
        initialPassword:
          type: string
          example: P@ssw0rd
        email:
          type: string
          example: user@gmail.com
        nickname:
          type: string
          example: スタールくん
        iconURL:
          type: string
          example: https://www.example.com/ad89afgt
        amount:
          type: integer
          example: 1234
    Transaction:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: string
          example: ad89afgt
        shopId:
          type: string
          example: nikuyokocho-0001
        price:
          type: integer
          example: 1000
        usedPoints:
          type: integer
          example: 100
        earnedPoints:
          type: integer
          example: 9
        createdAt:
          type: string
          example: "2021-08-27T00:00:00+09:00"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

