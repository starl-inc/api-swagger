swagger: "2.0"
info:
  description: "This is API Document of Minnano-Jisuikun"
  version: "1.0.0"
  title: "Minna-No-Jisuikun API Document"
  contact:
    email: "sato-keiju@kcgrp.jp"
host: "hostName"
basePath: "/basePath"

tags:
  - name: "User"
    description: "Access to User Information"
  - name: "Sign"
    description: "Sign up, sign in, and sign out"
  - name: "Calibrate"
    description: "Post selected recipes"
  - name: "Recipe"
    description: "Access to recipe Information"
  - name: "Food"
    description: "Access to Food Information"
  - name: "Cart"
    description: "Access to Cart Information"
  - name: "Order"
    description: "Access to order Information"
  - name: "Favorite"
    description: "Access to favorite recipes Information"
  - name: "Record"
    description: "Access to cooking record Information"
  - name: "Jisui-Power"
    description: "Access to Jisui-Power Information"
  - name: "Health"
    description: "Health check"

schemes:
  - "https"

securityDefinitions:
  cookieAuth:
    type: "apiKey"
    in: "header"
    name: "sessionId"

paths:
  # -------------------- User ----------------------
  /v1/user:
    get:
      tags:
        - "User"
      summary: "Get all users"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
                example: 1
              name:
                type: "string"
                example: "自炊太郎"
              email:
                type: "string"
                example: "hoge@gmail.com"
              postcode:
                type: "string"
                example: "1112222"
              address:
                type: "string"
                example: "東京都千代田区1-1"
              card_last4:
                type: "string"
                example: "3332"
              phone:
                type: "string"
                example: "08011112222"

        "401":
          description: "Unauthorized"
        "404":
          description: "User Not Found"
    put:
      tags:
        - "User"
      summary: "Update attributes of user resource"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "Latest user object"
          required: true
          schema:
            type: "object"
            properties:
              address:
                type: "string"
                example: "大阪府大阪市阿倍野区阿倍野筋1丁目1−43"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
                example: 1
              name:
                type: "string"
                example: "自炊太郎"
              email:
                type: "string"
                example: "hoge@gmail.com"
              postcode:
                type: "string"
                example: "1112222"
              address:
                type: "string"
                example: "大阪府大阪市阿倍野区阿倍野筋1丁目1−43"
              card_last4:
                type: "string"
                example: "3332"
              phone:
                type: "string"
                example: "08011112222"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "User Not Found"
    delete:
      tags:
        - "User"
      summary: "Delete user"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "password"
          required: true
          schema:
            type: "object"
            properties:
              password:
                type: "string"
                example: "password"
      responses:
        "200":
          description: "Successful Operation"
        "401":
          description: "Unauthorized"

  /v1/user/passwordReset:
    post:
      tags:
        - "User"
      summary: "Reset password"
      description: "WIP パスワードリセットの流れを調べないといけない。優先順位低"
      operationId: ""
      security:
        - cookieAuth: []
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "New password"
          required: true
          schema:
            type: "object"
            required:
              - "newPassword"
            properties:
              newPassword:
                type: "string"
                example: "hogehogehoge"
      responses:
        "201":
          description: "Successful Operation"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"

  # -------------------- Sign ----------------------
  /v1/signUp:
    post:
      tags:
        - "Sign"
      summary: "Send new user's information to sign up"
      description: ""
      operationId: ""
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "information to create new user"
          required: true
          schema:
            type: "object"
            required:
              - "name"
              - "email"
              - "password"
            properties:
              name:
                type: "string"
                example: "jisuitarou"
              email:
                type: "string"
                example: "jisuitarou@example.com"
              password:
                type: "string"
                example: "hogehoge1234"
      responses:
        "201":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              usersub:
                type: "string"
                example: "8b322172-d5bc-411f-937b-67d7369b7199"
        "400":
          description: "Bad Request"
  /v1/signIn:
    post:
      tags:
        - "Sign"
      summary: "Send user's information to sign in"
      description: ""
      operationId: ""
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "information to validate existing user"
          required: true
          schema:
            type: "object"
            required:
              - "email"
              - "password"
            properties:
              email:
                type: "string"
                example: "jisuitarou@example.com"
              password:
                type: "string"
                example: "hogehoge1234"
      responses:
        "201":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
                example: "1"
              name:
                type: "string"
                example: "自炊太郎"
        "400":
          description: "Bad Request"
        "404":
          description: "User Not Found"
  /v1/oneTimePassword:
    post:
      tags:
        - "Sign"
      summary: "onetime password for email validation"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "New password"
          required: true
          schema:
            type: "object"
            required:
              - "usersub"
              - "otp"
            properties:
              usersub:
                type: "string"
                example: "8b322172-d5bc-411f-937b-67d7369b7199"
              otp:
                type: "string"
                example: "12345"
      responses:
        "201":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
                example: "1"
              name:
                type: "string"
                example: "自炊太郎"

        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
  /v1/signOut:
    get:
      tags:
        - "Sign"
      summary: "Sign out"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful Operation"
        "401":
          description: "Unauthorized"

  # -------------------- Calibrate ----------------------
  /v1/caribrate:
    post:
      tags:
        - "Calibrate"
      summary: "calibration of user"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "favorite recipes and cooking experience"
          required: true
          schema:
            type: "object"
            required:
              - "favoriteRecipes"
            properties:
              favoriteRecipes:
                type: "array"
                items:
                  type: "string"
                example: ["ハンバーグ", "ラーメン"]
              experience:
                type: "array"
                description: "recipes user had made"
                items:
                  type: "string"
                example: ["野菜炒め"]
      responses:
        "201":
          description: "Successful Operation"
          schema:
            type: "object"
            required:
              - "favoriteRecipes"
            properties:
              favoriteRecipes:
                type: "array"
                items:
                  type: "string"
                example: ["ハンバーグ", "ラーメン"]
              experience:
                type: "array"
                description: "recipes user had made"
                items:
                  type: "string"
                example: ["野菜炒め"]
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "Recipe Not Found"
          # -------------------- Recipe ----------------------
          # 管理者機能のため本開発研修のスコープ外
          # /v1/recipe:
          #   get:
          #     tags:
          #     - "Recipe"
          #     summary: "Get all recipes"
          #     description: ""
          #     operationId: ""
          #     responses:
          #       "200":
          #         description: "successful operation"
          #   post:
          #     tags:
          #     - "Recipe"
          #     summary: "Create new recipe"
          #     description: ""
          #     operationId: ""
          #     produces:
          #     - "application/json"
          #     parameters:
          #     - name: "body"
          #       in: "body"
          #       description: "recipe object to create"
          #       required: true
          #       schema:
          #         type: "object"
          #         required:
          #         - "recipeName"
          #         properties:
          #           recipeName:
          #             type: "string"
          #             example: "こだわりのハンバーグ"
          #           difficulty:
          #             type: "integer"
          #             description: "1 - 5"
          #             example: 4
          #     responses:
          #       "200":
          #         description: "successful operation"

  /v1/recipe/{recipeId}:
    get:
      tags:
        - "Recipe"
      summary: "Get recipe detail information by recipe ID"
      description: ""
      operationId: ""
      produces:
        - "application/json"
      parameters:
        - name: "recipeId"
          in: "path"
          description: "Recipe ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              recipeName:
                type: "string"
                example: "こだわりのハンバーグ"
        "404":
          description: "Recipe Not Found"
          # 管理者機能のため本開発研修のスコープ外
          # put:
          #   tags:
          #   - "Recipe"
          #   summary: "Update attributes of recipe resource"
          #   description: ""
          #   operationId: ""
          #   produces:
          #   - "application/json"
          #   parameters:
          #   - name: "recipeId"
          #     in: "path"
          #     description: "Recipe Id"
          #     required: true
          #     type: "string"
          #   - name: "body"
          #     in: "body"
          #     description: "Latest recipe object"
          #     required: true
          #     schema:
          #       type: "object"
          #       properties:
          #         recipeName:
          #           type: "string"
          #           example: "超こだわりのハンバーグ"
          #   responses:
          #     "200":
          #       description: "successful operation"
          #     "404":
          #       description: "Recipe not found"
          #     "422":
          #       description: "Invalid payload supplied"
          # delete:
          #   tags:
          #   - "Recipe"
          #   summary: "Delete recipe"
          #   description: ""
          #   operationId: ""
          #   produces:
          #   - "application/json"
          #   parameters:
          #   - name: "recipeId"
          #     in: "path"
          #     description: "Recipe Id"
          #     required: true
          #     type: "string"
          #   responses:
          #     "200":
          #       description: "successful operation"
          #     "404":
          #       description: "Recipe not found"
          # -------------------- Food ----------------------
          # 管理者機能のため本開発研修のスコープ外
          # /v1/food:
          #   get:
          #     tags:
          #     - "Food"
          #     summary: "Get all foods"
          #     description: ""
          #     operationId: ""
          #     responses:
          #       "200":
          #         description: "successful operation"
          #   post:
          #     tags:
          #     - "Food"
          #     summary: "Create new food"
          #     description: ""
          #     operationId: ""
          #     produces:
          #     - "application/json"
          #     parameters:
          #     - name: "body"
          #       in: "body"
          #       description: "food object to create"
          #       required: true
          #       schema:
          #         type: "object"
          #         required:
          #         - "foodName"
          #         properties:
          #           recipeName:
          #             type: "string"
          #             example: "カリフラワー"
          #     responses:
          #       "200":
          #         description: "successful operation"

  /v1/food/{foodId}:
    get:
      tags:
        - "Food"
      summary: "Get food detail information by food ID"
      description: ""
      operationId: ""
      produces:
        - "application/json"
      parameters:
        - name: "foodId"
          in: "path"
          description: "Food ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              foodName:
                type: "string"
                example: "ブロッコリー"
        "404":
          description: "Food Not Found"
    # 管理者系機能のため本開発研修のスコープ外
    # put:
    #   tags:
    #   - "Food"
    #   summary: "Update attributes of food resource"
    #   description: ""
    #   operationId: ""
    #   produces:
    #   - "application/json"
    #   parameters:
    #   - name: "foodId"
    #     in: "path"
    #     description: "Food Id"
    #     required: true
    #     type: "string"
    #   - name: "body"
    #     in: "body"
    #     description: "Latest food object"
    #     required: true
    #     schema:
    #       type: "object"
    #       properties:
    #         foodName:
    #           type: "string"
    #           example: "ネオカリフラワー"
    #   responses:
    #     "200":
    #       description: "successful operation"
    #     "404":
    #       description: "Food not found"
    #     "422":
    #       description: "Invalid payload supplied"
    # delete:
    #   tags:
    #   - "Food"
    #   summary: "Delete food"
    #   description: ""
    #   operationId: ""
    #   produces:
    #   - "application/json"
    #   parameters:
    #   - name: "foodId"
    #     in: "path"
    #     description: "Food Id"
    #     required: true
    #     type: "string"
    #   responses:
    #     "200":
    #       description: "successful operation"
    #     "404":
    #       description: "Food not found"

  # -------------------- Cart ----------------------
  /v1/cart:
    get:
      tags:
        - "Cart"
      summary: "Get all recipes in cart"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              favoriteRecipes:
                type: "array"
                items:
                  type: "object"
                example:
                  [{ "recipeName": "ハンバーグ" }, { "recipeName": "ラーメン" }]
        "401":
          description: "Unauthorized"
    post:
      tags:
        - "Cart"
      summary: "Add new recipe to cart"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "recipe object to add"
          required: true
          schema:
            type: "object"
            required:
              - "recipeId"
            properties:
              recipeId:
                type: "string"
                example: "1234"
              size:
                type: "string"
                example: "大盛"
              number:
                type: "integer"
                example: 2
      responses:
        "201":
          description: "Successful Operation"
          schema:
            type: "object"
            required:
              - "recipeId"
            properties:
              recipeId:
                type: "string"
                example: "1234"
              size:
                type: "string"
                example: "大盛"
              number:
                type: "integer"
                example: 2
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"

  /v1/cart/{recipeId}:
    put:
      tags:
        - "Cart"
      summary: "Update detail of buying recipe in cart"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      produces:
        - "application/json"
      parameters:
        - name: "recipeId"
          in: "path"
          description: "Recipe Id"
          required: true
          type: "string"
        - name: "body"
          in: "body"
          description: "Fields of recipe to update"
          required: true
          schema:
            type: "object"
            properties:
              number:
                type: "integer"
                example: 1
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            required:
              - "recipeId"
            properties:
              recipeId:
                type: "string"
                example: "1234"
              size:
                type: "string"
                example: "大盛"
              number:
                type: "integer"
                example: 1
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "Recipe Not Found"
    delete:
      tags:
        - "Cart"
      summary: "Delete recipe from cart"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      produces:
        - "application/json"
      parameters:
        - name: "recipeId"
          in: "path"
          description: "recipe Id to delete"
          required: true
          type: "string"
      responses:
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
        "404":
          description: "Recipe Not Found"

  # -------------------- Order ----------------------
  /v1/order:
    get:
      tags:
        - "Order"
      summary: "Get all orders"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              orders:
                type: "array"
                items:
                  type: "object"
                example: [{ "orderId": "1234" }, { "orderId": "5678" }]
        "401":
          description: "Unauthorized"
    post:
      tags:
        - "Order"
      summary: "Add new recipe to cart"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "recipe object to add"
          required: true
          schema:
            type: "object"
            properties:
              recipes:
                type: "array"
                items:
                  type: "object"
                example:
                  [
                    { "recipeId": "1234", "number": 2 },
                    { "recipeId": "5678", "number": 2 },
                  ]
      responses:
        "201":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              recipes:
                type: "array"
                items:
                  type: "object"
                example:
                  [
                    { "recipeId": "1234", "number": 2 },
                    { "recipeId": "5678", "number": 2 },
                  ]
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"

  /v1/order/{orderId}:
    # 注文後の変更機能は本開発研修のスコープ外
    # put:
    #   tags:
    #   - "Order"
    #   summary: "Update detail of buying recipe in cart"
    #   description: ""
    #   operationId: ""
    #   security:
    #   - cookieAuth: []
    #   produces:
    #   - "application/json"
    #   parameters:
    #   - name: "orderId"
    #     in: "path"
    #     description: "Order Id"
    #     required: true
    #     type: "string"
    #   - name: "body"
    #     in: "body"
    #     description: "Fields of recipe to update"
    #     required: true
    #     schema:
    #       type: "object"
    #       properties:
    #         number:
    #           type: "integer"
    #           example: 1
    #   responses:
    #     "200":
    #       description: "successful operation"
    #     "404":
    #       description: "Food not found"
    #     "422":
    #       description: "Invalid payload supplied"
    delete:
      tags:
        - "Order"
      summary: "Delete recipe from cart"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      produces:
        - "application/json"
      parameters:
        - name: "orderId"
          in: "path"
          description: "recipe Id to delete"
          required: true
          type: "string"
      responses:
        "204":
          description: "No Content"
        "404":
          description: "Order Not Found"

  # -------------------- Favorite ----------------------
  /v1/favorite:
    get:
      tags:
        - "Favorite"
      summary: "Get all favorite recipes"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              recipes:
                type: "array"
                items:
                  type: "string"
                example: ["1234", "5678"]
        "401":
          description: "Unauthorized"
    post:
      tags:
        - "Favorite"
      summary: "Add new favorite recipe"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "Recipe ID"
          required: true
          schema:
            type: "object"
            required:
              - "recipeId"
            properties:
              recipeId:
                type: "string"
                example: "1234"
      responses:
        "201":
          description: "Successful Operation"
          schema:
            type: "object"
            required:
              - "recipeId"
            properties:
              recipeId:
                type: "string"
                example: "1234"
        "400":
          description: "Bad Request"

  /v1/favorite/{recipeId}:
    delete:
      tags:
        - "Favorite"
      summary: "Delete recipe from favorite recipes"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      produces:
        - "application/json"
      parameters:
        - name: "recipeId"
          in: "path"
          description: "recipe Id to delete from favorite recipes"
          required: true
          type: "string"
      responses:
        "204":
          description: "Successful Operation"
        "401":
          description: "Unauthorized"

  # -------------------- Record ----------------------
  /v1/record:
    get:
      tags:
        - "Record"
      summary: "Get all records"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              recipes:
                type: "array"
                items:
                  type: "object"
                example:
                  [
                    { "recipeId": "1234", "satisfaction": 3 },
                    { "recipeId": "5678", "satisfaction": 4 },
                  ]
        "401":
          description: "Unauthorized"
    post:
      tags:
        - "Record"
      summary: "Add new record"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "record object to add"
          required: true
          schema:
            type: "object"
            required:
              - "recipeId"
            properties:
              recipeId:
                type: "string"
                example: "1234"
              satisfaction:
                type: "integer"
                example: 4
      responses:
        "201":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              recipeId:
                type: "string"
                example: "1234"
              satisfaction:
                type: "integer"
                example: 4
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"

  /v1/record/media:
    post:
      tags:
        - "Record"
      summary: "Add new image used in records"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      consumes:
        - "multipart/form-data"
      parameters:
        - name: "file"
          in: "formData"
          type: "string"
          description: "Image to upload(binary)"
          required: true
      responses:
        "201":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              mediaId:
                type: "string"
                example: "1234"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"

  /v1/record/{recordId}:
    get:
      tags:
        - "Record"
      summary: "Get record detail information by record ID"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      produces:
        - "application/json"
      parameters:
        - name: "recordId"
          in: "path"
          description: "Record ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              recipes:
                type: "array"
                items:
                  type: "object"
                example:
                  [
                    { "recordId": "1234", "recipeId": "1234" },
                    { "recordId": "5678", "recipeId": "5678" },
                  ]
        "401":
          description: "Unauthorized"
        "404":
          description: "Record not found"
    put:
      tags:
        - "Record"
      summary: "Update record"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      produces:
        - "application/json"
      parameters:
        - name: "recordId"
          in: "path"
          description: "Record Id"
          required: true
          type: "string"
        - name: "body"
          in: "body"
          description: "Fields of record to update"
          required: true
          schema:
            type: "object"
            properties:
              satisfaction:
                type: "integer"
                example: 5
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              recordId:
                type: "string"
                example: "1234"
              satisfaction:
                type: "integer"
                example: 5
        "401":
          description: "Unauthorized"
        "404":
          description: "Record Not Found"
    delete:
      tags:
        - "Record"
      summary: "Delete record"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      produces:
        - "application/json"
      parameters:
        - name: "recordId"
          in: "path"
          description: "record Id to delete"
          required: true
          type: "string"
      responses:
        "204":
          description: "No Content"
        "404":
          description: "Record Not Found"

  # -------------------- Jisui-Power ----------------------
  /v1/jisuiPower:
    get:
      tags:
        - "Jisui-Power"
      summary: "Get Jisui-Power"
      description: ""
      operationId: ""
      security:
        - cookieAuth: []
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              money:
                type: "integer"
                example: 70
              nutrition:
                type: "integer"
                example: 50
        "401":
          description: "Unauthorized"

  # -------------------- Health ----------------------
  /v1/admin/health:
    get:
      tags:
        - "Health"
      summary: "Health check"
      description: ""
      operationId: ""
      responses:
        "200":
          description: "Successful Operation"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Hello Jisui-kun!"
        "404":
          description: "Jisui-kun is dead..."
