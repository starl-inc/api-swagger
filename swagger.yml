openapi: 3.0.0
info:
  title: Starl-Backend API Document
  description: This is API Document of Starl-Backend
  version: 1.0.3

servers:
  - url: https://api.starl.co.jp/v1

paths:
  # -------------------- AuthAdmin --------------------
  /admin/signin:
    post:
      tags:
        - AuthAdmin
      summary: Admin sign in
      requestBody:
        description: Admin auth info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminSignInRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminSignInResponse'
        '400':
          description: Bad Request
  /admin/signout:
    post:
      tags:
        - AuthAdmin
      summary: Admin sign out
      security:
        - BearerAuth: [ ]
      requestBody:
        description: RefreshToken
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: Successful Operation
        '400':
            description: Bad Request (RefreshToken is missing.)
        '401':
          description: Unauthorized (RefreshToken is invalid.)

  # -------------------- AuthStore --------------------
  /admin/store/signup:
    post:
      tags:
        - AuthStore
      summary: Sign up store by admin
      security:
        - BearerAuth: []
      requestBody:
        description: Store object to signup
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreSignUpRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreSignUpResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /store/signin:
    post:
      tags:
        - AuthStore
      summary: Sign in store
      requestBody:
        description: Store auth info
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/StoreInitialSignInRequest'
                - $ref: '#/components/schemas/StoreSignInRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StoreInitialSignInResponse'
                  - $ref: '#/components/schemas/StoreSignInResponse'
              examples:
                StoreInitialSignInResponse:
                  summary: 初回ログイン時のレスポンス
                  value:
                    initialSignIn: true
                    session: AYABeEG4Uc9u9f-1S6Cyj3G5i8IAHQABAAdTZXJ2aWNlABBDb2duaXRvVXNlclBvb
                    idToken:
                    refreshToken:
                StoreSignInResponse:
                  summary: 通常のレスポンス
                  value:
                    initialSignIn: false
                    session:
                    idToken: dmcxd329ujdmkemkd349r
                    refreshToken: dn43ud8uj32nk2je
        '400':
          description: Bad Request
        '401':
          description: Unauthorized (ID or password is invalid.)
  /store/reset-password:
    post:
      tags:
        - AuthStore
      summary: Store reset password
      requestBody:
        description: Store auth info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreResetPasswordRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreResetPasswordResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized (ID or session is invalid.)
  /store/signout:
    post:
      tags:
        - AuthStore
      summary: Store sign out
      security:
        - BearerAuth: [ ]
      requestBody:
        description: RefreshToken
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: Successful Operation
        '400':
          description: Bad Request (RefreshToken is missing.)
        '401':
          description: Unauthorized (RefreshToken is invalid.)

  # -------------------- AuthShop --------------------
  /admin/shop/signup:
    post:
      tags:
        - AuthShop
      summary: Sign up shop by admin
      security:
        - BearerAuth: []
      requestBody:
        description: Shop object to signup
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShopSignUpRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopSignUpResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /shop/signin:
    post:
      tags:
        - AuthShop
      summary: Sign in shop
      requestBody:
        description: Shop auth info
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ShopInitialSignInRequest'
                - $ref: '#/components/schemas/ShopSignInRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ShopInitialSignInResponse'
                  - $ref: '#/components/schemas/ShopSignInResponse'
              examples:
                ShopInitialSignInResponse:
                  summary: 初回ログイン時のレスポンス
                  value:
                    initialSignIn: true
                    session: AYABeEG4Uc9u9f-1S6Cyj3G5i8IAHQABAAdTZXJ2aWNlABBDb2duaXRvVXNlclBvb
                    idToken:
                    refreshToken:
                ShopSignInResponse:
                  summary: 通常のレスポンス
                  value:
                    initialSignIn: false
                    session:
                    idToken: dmcxd329ujdmkemkd349r
                    refreshToken: dn43ud8uj32nk2je
        '400':
          description: Bad Request
        '401':
          description: Unauthorized (ID or password is invalid.)
  /shop/reset-password:
    post:
      tags:
        - AuthShop
      summary: Shop reset password
      requestBody:
        description: Shop auth info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShopResetPasswordRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopResetPasswordResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized (ID or session is invalid.)
  /shop/signout:
    post:
      tags:
        - AuthShop
      summary: Shop sign out
      security:
        - BearerAuth: [ ]
      requestBody:
        description: RefreshToken
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: Successful Operation
        '400':
          description: Bad Request (RefreshToken is missing.)
        '401':
          description: Unauthorized (RefreshToken is invalid.)

  # -------------------- AuthUser --------------------
  /user/signup:
    post:
      tags:
        - AuthUser
      summary: Sign up user
      requestBody:
        description: User object to signup
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignUpRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSignUpResponse'
        '400':
          description: Bad Request
  /user/signin:
    post:
      tags:
        - AuthUser
      summary: Sign in user
      requestBody:
        description: User auth info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignInRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSignInResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized (ID or password is invalid.)
  /user/register:
    post:
      tags:
        - AuthUser
      summary: User registration
      security:
        - BearerAuth: [ ]
      requestBody:
        description: User account info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegisterResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /user/confirm:
    post:
      tags:
        - AuthUser
      summary: User confirmation
      requestBody:
        description: User confirmation code and new password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserConfirmRequest'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConfirmResponse'
        '400':
          description: Bad Request
  /user/signout:
    post:
      tags:
        - AuthUser
      summary: User sign out
      security:
        - BearerAuth: [ ]
      requestBody:
        description: RefreshToken
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: Successful Operation
        '400':
          description: Bad Request (RefreshToken is missing.)
        '401':
          description: Unauthorized (RefreshToken is invalid.)

  # -------------------- Admin --------------------
  /admin/store/list:
    get:
      tags:
        - Admin
      summary: Read stores by admin
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            example: 8
          description: The number of items to return
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  schema:
                    $ref: '#/components/schemas/Store'
        '401':
          description: Unauthorized
        '404':
          description: Store Not Found
  /admin/shop/list:
    get:
      tags:
        - Admin
      summary: Read shops by admin
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: storeId
          schema:
            type: string
            example: nikuyokocho
          description: Store ID
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of items to return
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  schema:
                    $ref: '#/components/schemas/Shop'
        '401':
          description: Unauthorized
        '404':
          description: Store Not Found
  /admin/store/{storeId}:
    put:
      tags:
        - Admin
      summary: Update Store by admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: storeId
          description: Store ID
          required: true
          schema:
            type: string
      requestBody:
        description: Store object to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                storeName:
                  type: string
                  example: 肉横丁
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Store Not Found
    delete:
      tags:
        - Admin
      summary: Delete Store by admin
      security:
        - BearerAuth: []
      parameters:
        - name: storeId
          in: path
          description: Store ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful Operation
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Store Not Found
  /admin/shop/{shopId}:
    put:
      tags:
        - Admin
      summary: Update Shop by admin
    delete:
      tags:
        - Admin
      summary: Delete Shop by admin
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: shopId
          description: Shop ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful Operation
        '401':
          description: Unauthorized
        '404':
          description: Shop Not Found

  # -------------------- Store --------------------
  /store:
    get:
      tags:
        - Store
      summary: Read Store
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: yearMonth
          schema:
            type: integer
            example: 202107
          required: true
          description: Year and month of items to return
        - in: query
          name: shopId
          schema:
            type: string
            example: sdf87gyu
          description: Shop ID to filter by
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: nikuyokocho
                  storeName:
                    type: string
                    example: 肉横丁
                  yearMonth:
                    type: integer
                    example: 202107
                  totalSales:
                    type: integer
                    example: 1234567
                  totalEarnedPoints:
                    type: integer
                    example: 12345
                  totalUsedPoints:
                    type: integer
                    example: 3000
                  approval:
                    type: boolean
                    example: true
                  shops:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: sdf87gyu
                        shopName:
                          type: string
                          example: 肉太郎

        '400':
          description: Bad Request
        '401':
          description: Unauthorized
    put:
      tags:
        - Store
      summary: Update Store by store
      security:
        - BearerAuth: [ ]
      requestBody:
        description: Store object to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: nikuyokocho
                storeName:
                  type: string
                  example: 渋谷 肉横丁
      responses:
        '200':
          description: Successful Operarion
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: nikuyokocho
                  storeName:
                    type: string
                    example: 渋谷 肉横丁
        '400':
          description: Bad Request
        '401':
          description: Unauthorized

  /store/transaction/list:
    get:
      tags:
        - Store
      summary: Transaction list
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: yearMonth
          schema:
            type: integer
            example: 202107
          required: true
          description: Year and month of items to return
        - in: query
          name: shopId
          schema:
            type: string
            example: sdf87gyu
          description: Shop ID to filter by
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    shopName:
                      type: string
                      example: 肉太郎
                    price:
                      type: integer
                      example: 2400
                    usedPoints:
                      type: integer
                      example: 100
                    createdAt:
                      type: string
                      example: "2021-06-01T16:23:56"
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Transaction not found

  /store/shop/list:
    get:
      tags:
        - Store
      summary: Shop list
      security:
        - BearerAuth: [ ]

  /store/shop/{shopId}:
    get:
      tags:
        - Store
      summary: Shop info
    put:
      tags:
        - Store
      summary: Update Store by store
      description: 
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: shopId
          description: Shop ID
          required: true
          schema:
            type: string
      requestBody:
        description: Shop object to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shopName:
                  type: string
                  example: 渋谷店
                address:
                  type: string
                  example: 東京都渋谷区神南１－２３－１３
                openingHours:
                  type: string
                  example: 5:00〜20:00
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized

  /store/approval:
    post:
      tags:
        - Store
      summary: Create Approval of all shops by store
      description: 
      security:
        - BearerAuth: []
      requestBody:
        description: Approval object to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                yearMonth:
                  type: integer
                  example: 202107
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Approval'
                example:
                  - id: 1
                    shopId: efgh5678
                    yearMonth: 202107
                    approvedBy: Store-abcd1234
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
    get:
      tags:
        - Store
      summary: Read Approval of all shops by store
      description: 
      security:
        - BearerAuth: []
      requestBody:
        description: Approval field to get
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                yearMonth:
                  type: integer
                  example: 202107
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Approval'
                example:
                  - id: 1
                    shopId: efgh5678
                    yearMonth: 202107
                    approvedBy: Store-abcd1234
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found

  # -------------------- Shop --------------------
  /shop:
    get:
      tags:
        - Shop
      summary: Read Shop
      description: 
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
        '401':
          description: Unauthorized
    put:
      tags:
        - Shop
      summary: Update Shop
      description: 
      security:
        - BearerAuth: []
      requestBody:
        description: Shop object to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shopName:
                  type: string
                address:
                  type: string
                openingHours:
                  type: string
              example:
                shopName: 渋谷店
                address: 東京都渋谷区神南１－２３－１３
                openingHours: 5:00〜20:00
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized

  /shop/approval:
    post:
      tags:
        - Shop
      summary: Create Approval list by shop
      description:
      security:
        - BearerAuth: [ ]
      requestBody:
        description: Approval object to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                yearMonth:
                  type: integer
                  example: 202108
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Approval'
              example:
                id: 2
                shopId: efgh5678
                yearMonth: 202108
                approvedBy: Shop-efgh5678
        '400':
          description: Bad Request
        '401':
          description: Unauthorized

  /shop/user:
    get:
      tags:
        - Shop
  /shop/transaction:
    post:
      tags:
        - Shop
      summary: Create Transaction by shop
      security:
        - BearerAuth: []
      requestBody:
        description: Transaction object to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                shopId:
                  type: string
                price:
                  type: integer
                usedPoints:
                  type: integer
              example:
                userId: starl2021
                shopId: efgh5678
                price: 1000
                usedPoints: 100
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /shop/transaction/{transactionId}:
    put:
      tags:
        - Shop
      summary: Update Transaction by shop
      description: 
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: transactionId
          description: Transaction ID
          required: true
          schema:
            type: integer
      requestBody:
        description: Transaction object to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                price:
                  type: integer
                  example: 1000
                usedPoints:
                  type: integer
                  example: 100
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found

  # -------------------- User --------------------
  /user:
    get:
      tags:
        - User
      summary: Read User
      description: 
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
    delete:
      tags:
        - User
      summary: Delete User
      description:
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Successful Operation
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
  /user/upload-icon-img:
    put:
      tags:
        - User
      summary: Upload user icon image
      description: 
      security:
        - BearerAuth: []
      requestBody:
        description: User icon image data to update
        required: true
        content:
          image/png:
      responses:
        '200':
          description: Successful Operation
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
  /user/update-nickname:
    put:
      tags:
        - User
      summary: Update nickname
      description: 
      security:
        - BearerAuth: []
      requestBody:
        description: Nicname to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
              example:
                nickname: starlくん
      responses:
        '200':
          description: Successful Operation
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found

  /user/shop/list:
    get:
      tags:
        - User
      summary: Read nearby shops by user
      description: 
      security:
        - BearerAuth: []
      requestBody:
        description: Current Location
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                latitude:
                  type: float
                  example: 123.456789
                longitude:
                  type: float
                  example: 123.456789
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    store:
                      type: object
                      properties:
                        id:
                          type: string
                        status:
                          type: string
                        shopName:
                          type: string
                      example:
                        id: abcd1234
                        status: CONFIRMED
                        shopName: マクドナルド
                    shop:
                      $ref: '#/components/schemas/Shop'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Shop Not Found

  /user/transaction/list:
    get:
      tags:
        - User
      summary: Read Transaction list by user
      description: 
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '401':
          description: Unauthorized
        '404':
          description: Not Found

tags:
  - name: AuthAdmin
    description: Authentication/Authorization of admin
  - name: AuthStore
    description: Authentication/Authorization of store
  - name: AuthShop
    description: Authentication/Authorization of shop
  - name: AuthUser
    description: Authentication/Authorization of user

  - name: Admin
    description: Endpoints to use in AdminApp
  - name: Store
    description: Endpoints to use in BizApp when store sign in
  - name: Shop
    description: Endpoints to use in BizApp when shop sign in
  - name: User
    description: Endpoints to use in UserApp

components:
  schemas:
    AdminSignInRequest:
      type: object
      properties:
        id:
          type: string
          example: admin
        password:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
    AdminSignInResponse:
      type: object
      properties:
        idToken:
          type: string
          example: dmcxd329ujdmkemkd349r
        refreshToken:
          type: string
          example: dn43ud8uj32nk2je
    RefreshToken:
      type: object
      properties:
        refreshToken:
          type: string
          example: dn43ud8uj32nk2je

    StoreSignUpRequest:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho
        email:
          type: string
          example: nikuyokocho@gmail.com
        storeName:
          type: string
          example: 肉横丁
    StoreSignUpResponse:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho
        email:
          type: string
          example: nikuyokocho@gmail.com
        initialPassword:
          type: string
          example: P@ssw0rd
        storeName:
          type: string
          example: 肉横丁
        status:
          type: string
          example: REGISTERED
    StoreInitialSignInRequest:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho
        password:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
    StoreInitialSignInResponse:
      type: object
      properties:
        initialSignIn:
          type: boolean
          example: true
        session:
          type: string
          example: AYABeEG4Uc9u9f-1S6Cyj3G5i8IAHQABAAdTZXJ2aWNlABBDb2duaXRvVXNlclBvb
        idToken:
          type: string
          example:
        refreshToken:
          type: string
          example:
    StoreSignInRequest:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho
        password:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
    StoreSignInResponse:
      type: object
      properties:
        initialSignIn:
          type: boolean
          example: false
        session:
          type: string
          example:
        idToken:
          type: string
          example: dmcxd329ujdmkemkd349r
        refreshToken:
          type: string
          example: dn43ud8uj32nk2je
    StoreResetPasswordRequest:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho
        newPassword:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
        session:
          type: string
          example: AYABeEG4Uc9u9f-1S6Cyj3G5i8IAHQABAAdTZXJ2aWNlABBDb2duaXRvVXNlclBvb
    StoreResetPasswordResponse:
      type: object
      properties:
        idToken:
          type: string
          example: dmcxd329ujdmkemkd349r
        refreshToken:
          type: string
          example: dn43ud8uj32nk2je

    ShopSignUpRequest:
      type: object
      properties:
        storeId:
          type: string
          example: nikuyokocho
        id:
          type: string
          example: sdf87gyu
        email:
          type: string
          example: nikuyokocho@gmail.com
        shopName:
          type: string
          example: 肉太郎
        address:
          type: string
          example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
        phone:
          type: string
          example: 03-6427-8994
        openingHours:
          type: string
          example: |
            月～日、祝日、祝前日: 17:00～翌0:00
            定休日：不定休
    ShopSignUpResponse:
      type: object
      properties:
        storeId:
          type: string
          example: nikuyokocho
        id:
          type: string
          example: sdf87gyu
        email:
          type: string
          example: nikuyokocho@gmail.com
        initialPassword:
          type: string
          example: P@ssw0rd
        shopName:
          type: string
          example: 肉太郎
        address:
          type: string
          example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
        phone:
          type: string
          example: 03-6427-8994
        openingHours:
          type: string
          example: |
            月～日、祝日、祝前日: 17:00～翌0:00
            定休日：不定休
        status:
          type: string
          example: REGISTERED
    ShopInitialSignInRequest:
      type: object
      properties:
        id:
          type: string
          example: sdf87gyu
        password:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
    ShopInitialSignInResponse:
      type: object
      properties:
        initialSignIn:
          type: boolean
          example: true
        session:
          type: string
          example: AYABeEG4Uc9u9f-1S6Cyj3G5i8IAHQABAAdTZXJ2aWNlABBDb2duaXRvVXNlclBvb
        idToken:
          type: string
          example:
        refreshToken:
          type: string
          example:
    ShopSignInRequest:
      type: object
      properties:
        id:
          type: string
          example: sdf87gyu
        password:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
    ShopSignInResponse:
      type: object
      properties:
        initialSignIn:
          type: boolean
          example: false
        session:
          type: string
          example:
        idToken:
          type: string
          example: dmcxd329ujdmkemkd349r
        refreshToken:
          type: string
          example: dn43ud8uj32nk2je
    ShopResetPasswordRequest:
      type: object
      properties:
        id:
          type: string
          example: sdf87gyu
        newPassword:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
        session:
          type: string
          example: AYABeEG4Uc9u9f-1S6Cyj3G5i8IAHQABAAdTZXJ2aWNlABBDb2duaXRvVXNlclBvb
    ShopResetPasswordResponse:
        type: object
        properties:
          idToken:
            type: string
            example: dmcxd329ujdmkemkd349r
          refreshToken:
            type: string
            example: dn43ud8uj32nk2je

    UserSignUpRequest:
      type: object
      properties:
        deviceId:
          type: string
          example: 3K0XXXXX-83XX-HEXX-KIXX-29KH83XXXXXX
    UserSignUpResponse:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        initialPassword:
          type: string
          example: P@ssw0rd
        status:
          type: string
          example: UNREGISTERED
    UserSignInRequest:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        password:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
    UserSignInResponse:
      type: object
      properties:
        idToken:
          type: string
          example: dmcxd329ujdmkemkd349r
        refreshToken:
          type: string
          example: dn43ud8uj32nk2je
    UserRegisterRequest:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        email:
          type: string
          example: user@gmail.com
        nickname:
          type: string
          example: スタールくん
    UserRegisterResponse:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        email:
          type: string
          example: user@gmail.com
        nickname:
          type: string
          example: スタールくん
        status:
          type: string
          example: REGISTERED
    UserConfirmRequest:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        code:
          type: string
          example: s8xert6c
        password:
          type: string
          example: b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342
    UserConfirmResponse:
        type: object
        properties:
          idToken:
            type: string
            example: dmcxd329ujdmkemkd349r
          refreshToken:
            type: string
            example: dn43ud8uj32nk2je

    Store:
      type: object
      properties:
        id:
          type: string
          example: nikuyokocho
        email:
          type: string
          example: nikuyokocho@gmail.com
        initialPassword:
          type: string
          example: P@ssw0rd
        storeName:
          type: string
          example: 肉横丁
        status:
          type: string
          example: CONFIRMED
    Shop:
      type: object
      properties:
        storeId:
          type: string
          example: nikuyokocho
        id:
          type: string
          example: sdf87gyu
        email:
          type: string
          example: nikuyokocho@gmail.com
        initialPassword:
          type: string
          example: P@ssw0rd
        shopName:
          type: string
          example: 肉太郎
        address:
          type: string
          example: 東京都渋谷区宇田川町１３−８ ちとせ会館 ２F 渋谷肉横丁内
        phone:
          type: string
          example: 03-6427-8994
        openingHours:
          type: string
          example: |
            月～日、祝日、祝前日: 17:00～翌0:00
            定休日：不定休
        status:
          type: string
          example: REGISTERED
    User:
      type: object
      properties:
        id:
          type: string
          example: ad89afgt
        deviceId:
          type: string
          example: 3K0XXXXX-83XX-HEXX-KIXX-29KH83XXXXXX
        initialPassword:
          type: string
          example: P@ssw0rd
        email:
          type: string
          example: user@gmail.com
        nickname:
          type: string
          example: スタールくん
        iconURL:
          type: string
          example: https://www.example.com/ad89afgt
        amount:
          type: integer
          example: 1234
        status:
          type: string
          example: CONFIRMED
    Transaction:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: string
          example: ad89afgt
        shopId:
          type: string
          example: sdf87gyu
        price:
          type: integer
          example: 1000
        usedPoints:
          type: integer
          example: 100
        earnedPoints:
          type: integer
          example: 9
        newAmount:
          type: integer
          example: 1009
        createdAt:
          type: string
          example: "2021-08-27T00:00:00"
    Approval:
      type: object
      properties:
        id:
          type: integer
          example: 1
        shopId:
          type: string
          example: sdf87gyu
        yearMonth:
          type: integer
          example: 202109
        approvedBy:
          type: string
          example: sdf87gyu

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

